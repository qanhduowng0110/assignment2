// Code generated by ent, DO NOT EDIT.

package featuretype

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldLTE(FieldID, id))
}

// EarthquakeID applies equality check predicate on the "earthquake_id" field. It's identical to EarthquakeIDEQ.
func EarthquakeID(v int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldEarthquakeID, v))
}

// FeatureProductType applies equality check predicate on the "feature_product_type" field. It's identical to FeatureProductTypeEQ.
func FeatureProductType(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldFeatureProductType, v))
}

// EarthquakeIDEQ applies the EQ predicate on the "earthquake_id" field.
func EarthquakeIDEQ(v int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldEarthquakeID, v))
}

// EarthquakeIDNEQ applies the NEQ predicate on the "earthquake_id" field.
func EarthquakeIDNEQ(v int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNEQ(FieldEarthquakeID, v))
}

// EarthquakeIDIn applies the In predicate on the "earthquake_id" field.
func EarthquakeIDIn(vs ...int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDNotIn applies the NotIn predicate on the "earthquake_id" field.
func EarthquakeIDNotIn(vs ...int32) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNotIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDIsNil applies the IsNil predicate on the "earthquake_id" field.
func EarthquakeIDIsNil() predicate.FeatureType {
	return predicate.FeatureType(sql.FieldIsNull(FieldEarthquakeID))
}

// EarthquakeIDNotNil applies the NotNil predicate on the "earthquake_id" field.
func EarthquakeIDNotNil() predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNotNull(FieldEarthquakeID))
}

// FeatureProductTypeEQ applies the EQ predicate on the "feature_product_type" field.
func FeatureProductTypeEQ(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEQ(FieldFeatureProductType, v))
}

// FeatureProductTypeNEQ applies the NEQ predicate on the "feature_product_type" field.
func FeatureProductTypeNEQ(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNEQ(FieldFeatureProductType, v))
}

// FeatureProductTypeIn applies the In predicate on the "feature_product_type" field.
func FeatureProductTypeIn(vs ...string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldIn(FieldFeatureProductType, vs...))
}

// FeatureProductTypeNotIn applies the NotIn predicate on the "feature_product_type" field.
func FeatureProductTypeNotIn(vs ...string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldNotIn(FieldFeatureProductType, vs...))
}

// FeatureProductTypeGT applies the GT predicate on the "feature_product_type" field.
func FeatureProductTypeGT(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldGT(FieldFeatureProductType, v))
}

// FeatureProductTypeGTE applies the GTE predicate on the "feature_product_type" field.
func FeatureProductTypeGTE(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldGTE(FieldFeatureProductType, v))
}

// FeatureProductTypeLT applies the LT predicate on the "feature_product_type" field.
func FeatureProductTypeLT(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldLT(FieldFeatureProductType, v))
}

// FeatureProductTypeLTE applies the LTE predicate on the "feature_product_type" field.
func FeatureProductTypeLTE(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldLTE(FieldFeatureProductType, v))
}

// FeatureProductTypeContains applies the Contains predicate on the "feature_product_type" field.
func FeatureProductTypeContains(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldContains(FieldFeatureProductType, v))
}

// FeatureProductTypeHasPrefix applies the HasPrefix predicate on the "feature_product_type" field.
func FeatureProductTypeHasPrefix(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldHasPrefix(FieldFeatureProductType, v))
}

// FeatureProductTypeHasSuffix applies the HasSuffix predicate on the "feature_product_type" field.
func FeatureProductTypeHasSuffix(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldHasSuffix(FieldFeatureProductType, v))
}

// FeatureProductTypeEqualFold applies the EqualFold predicate on the "feature_product_type" field.
func FeatureProductTypeEqualFold(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldEqualFold(FieldFeatureProductType, v))
}

// FeatureProductTypeContainsFold applies the ContainsFold predicate on the "feature_product_type" field.
func FeatureProductTypeContainsFold(v string) predicate.FeatureType {
	return predicate.FeatureType(sql.FieldContainsFold(FieldFeatureProductType, v))
}

// HasEarthquake applies the HasEdge predicate on the "earthquake" edge.
func HasEarthquake() predicate.FeatureType {
	return predicate.FeatureType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EarthquakeTable, EarthquakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarthquakeWith applies the HasEdge predicate on the "earthquake" edge with a given conditions (other predicates).
func HasEarthquakeWith(preds ...predicate.Earthquake) predicate.FeatureType {
	return predicate.FeatureType(func(s *sql.Selector) {
		step := newEarthquakeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeatureType) predicate.FeatureType {
	return predicate.FeatureType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeatureType) predicate.FeatureType {
	return predicate.FeatureType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeatureType) predicate.FeatureType {
	return predicate.FeatureType(sql.NotPredicates(p))
}
