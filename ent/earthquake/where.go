// Code generated by ent, DO NOT EDIT.

package earthquake

import (
	"entdemo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldID, id))
}

// FeatureID applies equality check predicate on the "feature_id" field. It's identical to FeatureIDEQ.
func FeatureID(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldFeatureID, v))
}

// Magnitude applies equality check predicate on the "magnitude" field. It's identical to MagnitudeEQ.
func Magnitude(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagnitude, v))
}

// OccurTime applies equality check predicate on the "occur_time" field. It's identical to OccurTimeEQ.
func OccurTime(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldOccurTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdateTime, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// DetailURL applies equality check predicate on the "detail_url" field. It's identical to DetailURLEQ.
func DetailURL(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDetailURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// Tsunami applies equality check predicate on the "tsunami" field. It's identical to TsunamiEQ.
func Tsunami(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// Sig applies equality check predicate on the "sig" field. It's identical to SigEQ.
func Sig(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSig, v))
}

// Net applies equality check predicate on the "net" field. It's identical to NetEQ.
func Net(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// Nst applies equality check predicate on the "nst" field. It's identical to NstEQ.
func Nst(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// Dmin applies equality check predicate on the "dmin" field. It's identical to DminEQ.
func Dmin(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// Rms applies equality check predicate on the "rms" field. It's identical to RmsEQ.
func Rms(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// Gap applies equality check predicate on the "gap" field. It's identical to GapEQ.
func Gap(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// MagType applies equality check predicate on the "mag_type" field. It's identical to MagTypeEQ.
func MagType(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagType, v))
}

// EarthquakeType applies equality check predicate on the "earthquake_type" field. It's identical to EarthquakeTypeEQ.
func EarthquakeType(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldEarthquakeType, v))
}

// FeatureIDEQ applies the EQ predicate on the "feature_id" field.
func FeatureIDEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureIDNEQ applies the NEQ predicate on the "feature_id" field.
func FeatureIDNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldFeatureID, v))
}

// FeatureIDIn applies the In predicate on the "feature_id" field.
func FeatureIDIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldFeatureID, vs...))
}

// FeatureIDNotIn applies the NotIn predicate on the "feature_id" field.
func FeatureIDNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldFeatureID, vs...))
}

// FeatureIDGT applies the GT predicate on the "feature_id" field.
func FeatureIDGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldFeatureID, v))
}

// FeatureIDGTE applies the GTE predicate on the "feature_id" field.
func FeatureIDGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldFeatureID, v))
}

// FeatureIDLT applies the LT predicate on the "feature_id" field.
func FeatureIDLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldFeatureID, v))
}

// FeatureIDLTE applies the LTE predicate on the "feature_id" field.
func FeatureIDLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldFeatureID, v))
}

// FeatureIDContains applies the Contains predicate on the "feature_id" field.
func FeatureIDContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldFeatureID, v))
}

// FeatureIDHasPrefix applies the HasPrefix predicate on the "feature_id" field.
func FeatureIDHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldFeatureID, v))
}

// FeatureIDHasSuffix applies the HasSuffix predicate on the "feature_id" field.
func FeatureIDHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldFeatureID, v))
}

// FeatureIDEqualFold applies the EqualFold predicate on the "feature_id" field.
func FeatureIDEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldFeatureID, v))
}

// FeatureIDContainsFold applies the ContainsFold predicate on the "feature_id" field.
func FeatureIDContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldFeatureID, v))
}

// MagnitudeEQ applies the EQ predicate on the "magnitude" field.
func MagnitudeEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagnitude, v))
}

// MagnitudeNEQ applies the NEQ predicate on the "magnitude" field.
func MagnitudeNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldMagnitude, v))
}

// MagnitudeIn applies the In predicate on the "magnitude" field.
func MagnitudeIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldMagnitude, vs...))
}

// MagnitudeNotIn applies the NotIn predicate on the "magnitude" field.
func MagnitudeNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldMagnitude, vs...))
}

// MagnitudeGT applies the GT predicate on the "magnitude" field.
func MagnitudeGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldMagnitude, v))
}

// MagnitudeGTE applies the GTE predicate on the "magnitude" field.
func MagnitudeGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldMagnitude, v))
}

// MagnitudeLT applies the LT predicate on the "magnitude" field.
func MagnitudeLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldMagnitude, v))
}

// MagnitudeLTE applies the LTE predicate on the "magnitude" field.
func MagnitudeLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldMagnitude, v))
}

// OccurTimeEQ applies the EQ predicate on the "occur_time" field.
func OccurTimeEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldOccurTime, v))
}

// OccurTimeNEQ applies the NEQ predicate on the "occur_time" field.
func OccurTimeNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldOccurTime, v))
}

// OccurTimeIn applies the In predicate on the "occur_time" field.
func OccurTimeIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldOccurTime, vs...))
}

// OccurTimeNotIn applies the NotIn predicate on the "occur_time" field.
func OccurTimeNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldOccurTime, vs...))
}

// OccurTimeGT applies the GT predicate on the "occur_time" field.
func OccurTimeGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldOccurTime, v))
}

// OccurTimeGTE applies the GTE predicate on the "occur_time" field.
func OccurTimeGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldOccurTime, v))
}

// OccurTimeLT applies the LT predicate on the "occur_time" field.
func OccurTimeLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldOccurTime, v))
}

// OccurTimeLTE applies the LTE predicate on the "occur_time" field.
func OccurTimeLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldOccurTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldUpdateTime, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldURL, v))
}

// DetailURLEQ applies the EQ predicate on the "detail_url" field.
func DetailURLEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDetailURL, v))
}

// DetailURLNEQ applies the NEQ predicate on the "detail_url" field.
func DetailURLNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDetailURL, v))
}

// DetailURLIn applies the In predicate on the "detail_url" field.
func DetailURLIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDetailURL, vs...))
}

// DetailURLNotIn applies the NotIn predicate on the "detail_url" field.
func DetailURLNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDetailURL, vs...))
}

// DetailURLGT applies the GT predicate on the "detail_url" field.
func DetailURLGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDetailURL, v))
}

// DetailURLGTE applies the GTE predicate on the "detail_url" field.
func DetailURLGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDetailURL, v))
}

// DetailURLLT applies the LT predicate on the "detail_url" field.
func DetailURLLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDetailURL, v))
}

// DetailURLLTE applies the LTE predicate on the "detail_url" field.
func DetailURLLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDetailURL, v))
}

// DetailURLContains applies the Contains predicate on the "detail_url" field.
func DetailURLContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldDetailURL, v))
}

// DetailURLHasPrefix applies the HasPrefix predicate on the "detail_url" field.
func DetailURLHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldDetailURL, v))
}

// DetailURLHasSuffix applies the HasSuffix predicate on the "detail_url" field.
func DetailURLHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldDetailURL, v))
}

// DetailURLEqualFold applies the EqualFold predicate on the "detail_url" field.
func DetailURLEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldDetailURL, v))
}

// DetailURLContainsFold applies the ContainsFold predicate on the "detail_url" field.
func DetailURLContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldDetailURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldStatus, v))
}

// TsunamiEQ applies the EQ predicate on the "tsunami" field.
func TsunamiEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// TsunamiNEQ applies the NEQ predicate on the "tsunami" field.
func TsunamiNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTsunami, v))
}

// TsunamiIn applies the In predicate on the "tsunami" field.
func TsunamiIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTsunami, vs...))
}

// TsunamiNotIn applies the NotIn predicate on the "tsunami" field.
func TsunamiNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTsunami, vs...))
}

// TsunamiGT applies the GT predicate on the "tsunami" field.
func TsunamiGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldTsunami, v))
}

// TsunamiGTE applies the GTE predicate on the "tsunami" field.
func TsunamiGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldTsunami, v))
}

// TsunamiLT applies the LT predicate on the "tsunami" field.
func TsunamiLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldTsunami, v))
}

// TsunamiLTE applies the LTE predicate on the "tsunami" field.
func TsunamiLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldTsunami, v))
}

// SigEQ applies the EQ predicate on the "sig" field.
func SigEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSig, v))
}

// SigNEQ applies the NEQ predicate on the "sig" field.
func SigNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldSig, v))
}

// SigIn applies the In predicate on the "sig" field.
func SigIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldSig, vs...))
}

// SigNotIn applies the NotIn predicate on the "sig" field.
func SigNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldSig, vs...))
}

// SigGT applies the GT predicate on the "sig" field.
func SigGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldSig, v))
}

// SigGTE applies the GTE predicate on the "sig" field.
func SigGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldSig, v))
}

// SigLT applies the LT predicate on the "sig" field.
func SigLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldSig, v))
}

// SigLTE applies the LTE predicate on the "sig" field.
func SigLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldSig, v))
}

// NetEQ applies the EQ predicate on the "net" field.
func NetEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// NetNEQ applies the NEQ predicate on the "net" field.
func NetNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNet, v))
}

// NetIn applies the In predicate on the "net" field.
func NetIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNet, vs...))
}

// NetNotIn applies the NotIn predicate on the "net" field.
func NetNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNet, vs...))
}

// NetGT applies the GT predicate on the "net" field.
func NetGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNet, v))
}

// NetGTE applies the GTE predicate on the "net" field.
func NetGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNet, v))
}

// NetLT applies the LT predicate on the "net" field.
func NetLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNet, v))
}

// NetLTE applies the LTE predicate on the "net" field.
func NetLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNet, v))
}

// NetContains applies the Contains predicate on the "net" field.
func NetContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldNet, v))
}

// NetHasPrefix applies the HasPrefix predicate on the "net" field.
func NetHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldNet, v))
}

// NetHasSuffix applies the HasSuffix predicate on the "net" field.
func NetHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldNet, v))
}

// NetEqualFold applies the EqualFold predicate on the "net" field.
func NetEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldNet, v))
}

// NetContainsFold applies the ContainsFold predicate on the "net" field.
func NetContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldNet, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldCode, v))
}

// NstEQ applies the EQ predicate on the "nst" field.
func NstEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// NstNEQ applies the NEQ predicate on the "nst" field.
func NstNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNst, v))
}

// NstIn applies the In predicate on the "nst" field.
func NstIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNst, vs...))
}

// NstNotIn applies the NotIn predicate on the "nst" field.
func NstNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNst, vs...))
}

// NstGT applies the GT predicate on the "nst" field.
func NstGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNst, v))
}

// NstGTE applies the GTE predicate on the "nst" field.
func NstGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNst, v))
}

// NstLT applies the LT predicate on the "nst" field.
func NstLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNst, v))
}

// NstLTE applies the LTE predicate on the "nst" field.
func NstLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNst, v))
}

// DminEQ applies the EQ predicate on the "dmin" field.
func DminEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// DminNEQ applies the NEQ predicate on the "dmin" field.
func DminNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDmin, v))
}

// DminIn applies the In predicate on the "dmin" field.
func DminIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDmin, vs...))
}

// DminNotIn applies the NotIn predicate on the "dmin" field.
func DminNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDmin, vs...))
}

// DminGT applies the GT predicate on the "dmin" field.
func DminGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDmin, v))
}

// DminGTE applies the GTE predicate on the "dmin" field.
func DminGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDmin, v))
}

// DminLT applies the LT predicate on the "dmin" field.
func DminLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDmin, v))
}

// DminLTE applies the LTE predicate on the "dmin" field.
func DminLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDmin, v))
}

// RmsEQ applies the EQ predicate on the "rms" field.
func RmsEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// RmsNEQ applies the NEQ predicate on the "rms" field.
func RmsNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldRms, v))
}

// RmsIn applies the In predicate on the "rms" field.
func RmsIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldRms, vs...))
}

// RmsNotIn applies the NotIn predicate on the "rms" field.
func RmsNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldRms, vs...))
}

// RmsGT applies the GT predicate on the "rms" field.
func RmsGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldRms, v))
}

// RmsGTE applies the GTE predicate on the "rms" field.
func RmsGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldRms, v))
}

// RmsLT applies the LT predicate on the "rms" field.
func RmsLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldRms, v))
}

// RmsLTE applies the LTE predicate on the "rms" field.
func RmsLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldRms, v))
}

// GapEQ applies the EQ predicate on the "gap" field.
func GapEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// GapNEQ applies the NEQ predicate on the "gap" field.
func GapNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldGap, v))
}

// GapIn applies the In predicate on the "gap" field.
func GapIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldGap, vs...))
}

// GapNotIn applies the NotIn predicate on the "gap" field.
func GapNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldGap, vs...))
}

// GapGT applies the GT predicate on the "gap" field.
func GapGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldGap, v))
}

// GapGTE applies the GTE predicate on the "gap" field.
func GapGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldGap, v))
}

// GapLT applies the LT predicate on the "gap" field.
func GapLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldGap, v))
}

// GapLTE applies the LTE predicate on the "gap" field.
func GapLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldGap, v))
}

// MagTypeEQ applies the EQ predicate on the "mag_type" field.
func MagTypeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagType, v))
}

// MagTypeNEQ applies the NEQ predicate on the "mag_type" field.
func MagTypeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldMagType, v))
}

// MagTypeIn applies the In predicate on the "mag_type" field.
func MagTypeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldMagType, vs...))
}

// MagTypeNotIn applies the NotIn predicate on the "mag_type" field.
func MagTypeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldMagType, vs...))
}

// MagTypeGT applies the GT predicate on the "mag_type" field.
func MagTypeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldMagType, v))
}

// MagTypeGTE applies the GTE predicate on the "mag_type" field.
func MagTypeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldMagType, v))
}

// MagTypeLT applies the LT predicate on the "mag_type" field.
func MagTypeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldMagType, v))
}

// MagTypeLTE applies the LTE predicate on the "mag_type" field.
func MagTypeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldMagType, v))
}

// MagTypeContains applies the Contains predicate on the "mag_type" field.
func MagTypeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldMagType, v))
}

// MagTypeHasPrefix applies the HasPrefix predicate on the "mag_type" field.
func MagTypeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldMagType, v))
}

// MagTypeHasSuffix applies the HasSuffix predicate on the "mag_type" field.
func MagTypeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldMagType, v))
}

// MagTypeEqualFold applies the EqualFold predicate on the "mag_type" field.
func MagTypeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldMagType, v))
}

// MagTypeContainsFold applies the ContainsFold predicate on the "mag_type" field.
func MagTypeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldMagType, v))
}

// EarthquakeTypeEQ applies the EQ predicate on the "earthquake_type" field.
func EarthquakeTypeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldEarthquakeType, v))
}

// EarthquakeTypeNEQ applies the NEQ predicate on the "earthquake_type" field.
func EarthquakeTypeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldEarthquakeType, v))
}

// EarthquakeTypeIn applies the In predicate on the "earthquake_type" field.
func EarthquakeTypeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldEarthquakeType, vs...))
}

// EarthquakeTypeNotIn applies the NotIn predicate on the "earthquake_type" field.
func EarthquakeTypeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldEarthquakeType, vs...))
}

// EarthquakeTypeGT applies the GT predicate on the "earthquake_type" field.
func EarthquakeTypeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldEarthquakeType, v))
}

// EarthquakeTypeGTE applies the GTE predicate on the "earthquake_type" field.
func EarthquakeTypeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldEarthquakeType, v))
}

// EarthquakeTypeLT applies the LT predicate on the "earthquake_type" field.
func EarthquakeTypeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldEarthquakeType, v))
}

// EarthquakeTypeLTE applies the LTE predicate on the "earthquake_type" field.
func EarthquakeTypeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldEarthquakeType, v))
}

// EarthquakeTypeContains applies the Contains predicate on the "earthquake_type" field.
func EarthquakeTypeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldEarthquakeType, v))
}

// EarthquakeTypeHasPrefix applies the HasPrefix predicate on the "earthquake_type" field.
func EarthquakeTypeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldEarthquakeType, v))
}

// EarthquakeTypeHasSuffix applies the HasSuffix predicate on the "earthquake_type" field.
func EarthquakeTypeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldEarthquakeType, v))
}

// EarthquakeTypeEqualFold applies the EqualFold predicate on the "earthquake_type" field.
func EarthquakeTypeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldEarthquakeType, v))
}

// EarthquakeTypeContainsFold applies the ContainsFold predicate on the "earthquake_type" field.
func EarthquakeTypeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldEarthquakeType, v))
}

// HasMainEvents applies the HasEdge predicate on the "main_events" edge.
func HasMainEvents() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MainEventsTable, MainEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainEventsWith applies the HasEdge predicate on the "main_events" edge with a given conditions (other predicates).
func HasMainEventsWith(preds ...predicate.AssociatedEvent) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newMainEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssociatedEvents applies the HasEdge predicate on the "associated_events" edge.
func HasAssociatedEvents() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssociatedEventsTable, AssociatedEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssociatedEventsWith applies the HasEdge predicate on the "associated_events" edge with a given conditions (other predicates).
func HasAssociatedEventsWith(preds ...predicate.AssociatedEvent) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newAssociatedEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventTypes applies the HasEdge predicate on the "event_types" edge.
func HasEventTypes() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventTypesTable, EventTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventTypesWith applies the HasEdge predicate on the "event_types" edge with a given conditions (other predicates).
func HasEventTypesWith(preds ...predicate.EventType) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newEventTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatureTypes applies the HasEdge predicate on the "feature_types" edge.
func HasFeatureTypes() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeatureTypesTable, FeatureTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureTypesWith applies the HasEdge predicate on the "feature_types" edge with a given conditions (other predicates).
func HasFeatureTypesWith(preds ...predicate.FeatureType) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newFeatureTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeltReports applies the HasEdge predicate on the "felt_reports" edge.
func HasFeltReports() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeltReportsTable, FeltReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeltReportsWith applies the HasEdge predicate on the "felt_reports" edge with a given conditions (other predicates).
func HasFeltReportsWith(preds ...predicate.FeltReport) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newFeltReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGeometries applies the HasEdge predicate on the "geometries" edge.
func HasGeometries() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GeometriesTable, GeometriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeometriesWith applies the HasEdge predicate on the "geometries" edge with a given conditions (other predicates).
func HasGeometriesWith(preds ...predicate.Geometry) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newGeometriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.NotPredicates(p))
}
