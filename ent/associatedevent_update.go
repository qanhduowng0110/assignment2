// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/associatedevent"
	"entdemo/ent/earthquake"
	"entdemo/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssociatedEventUpdate is the builder for updating AssociatedEvent entities.
type AssociatedEventUpdate struct {
	config
	hooks    []Hook
	mutation *AssociatedEventMutation
}

// Where appends a list predicates to the AssociatedEventUpdate builder.
func (aeu *AssociatedEventUpdate) Where(ps ...predicate.AssociatedEvent) *AssociatedEventUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetEarthquakeID sets the "earthquake_id" field.
func (aeu *AssociatedEventUpdate) SetEarthquakeID(i int32) *AssociatedEventUpdate {
	aeu.mutation.SetEarthquakeID(i)
	return aeu
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (aeu *AssociatedEventUpdate) SetNillableEarthquakeID(i *int32) *AssociatedEventUpdate {
	if i != nil {
		aeu.SetEarthquakeID(*i)
	}
	return aeu
}

// ClearEarthquakeID clears the value of the "earthquake_id" field.
func (aeu *AssociatedEventUpdate) ClearEarthquakeID() *AssociatedEventUpdate {
	aeu.mutation.ClearEarthquakeID()
	return aeu
}

// SetAssociateID sets the "associate_id" field.
func (aeu *AssociatedEventUpdate) SetAssociateID(i int32) *AssociatedEventUpdate {
	aeu.mutation.SetAssociateID(i)
	return aeu
}

// SetNillableAssociateID sets the "associate_id" field if the given value is not nil.
func (aeu *AssociatedEventUpdate) SetNillableAssociateID(i *int32) *AssociatedEventUpdate {
	if i != nil {
		aeu.SetAssociateID(*i)
	}
	return aeu
}

// ClearAssociateID clears the value of the "associate_id" field.
func (aeu *AssociatedEventUpdate) ClearAssociateID() *AssociatedEventUpdate {
	aeu.mutation.ClearAssociateID()
	return aeu
}

// SetMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID.
func (aeu *AssociatedEventUpdate) SetMainEventEarthquakeID(id int32) *AssociatedEventUpdate {
	aeu.mutation.SetMainEventEarthquakeID(id)
	return aeu
}

// SetNillableMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aeu *AssociatedEventUpdate) SetNillableMainEventEarthquakeID(id *int32) *AssociatedEventUpdate {
	if id != nil {
		aeu = aeu.SetMainEventEarthquakeID(*id)
	}
	return aeu
}

// SetMainEventEarthquake sets the "main_event_earthquake" edge to the Earthquake entity.
func (aeu *AssociatedEventUpdate) SetMainEventEarthquake(e *Earthquake) *AssociatedEventUpdate {
	return aeu.SetMainEventEarthquakeID(e.ID)
}

// SetAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID.
func (aeu *AssociatedEventUpdate) SetAssociatedEventEarthquakeID(id int32) *AssociatedEventUpdate {
	aeu.mutation.SetAssociatedEventEarthquakeID(id)
	return aeu
}

// SetNillableAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aeu *AssociatedEventUpdate) SetNillableAssociatedEventEarthquakeID(id *int32) *AssociatedEventUpdate {
	if id != nil {
		aeu = aeu.SetAssociatedEventEarthquakeID(*id)
	}
	return aeu
}

// SetAssociatedEventEarthquake sets the "associated_event_earthquake" edge to the Earthquake entity.
func (aeu *AssociatedEventUpdate) SetAssociatedEventEarthquake(e *Earthquake) *AssociatedEventUpdate {
	return aeu.SetAssociatedEventEarthquakeID(e.ID)
}

// Mutation returns the AssociatedEventMutation object of the builder.
func (aeu *AssociatedEventUpdate) Mutation() *AssociatedEventMutation {
	return aeu.mutation
}

// ClearMainEventEarthquake clears the "main_event_earthquake" edge to the Earthquake entity.
func (aeu *AssociatedEventUpdate) ClearMainEventEarthquake() *AssociatedEventUpdate {
	aeu.mutation.ClearMainEventEarthquake()
	return aeu
}

// ClearAssociatedEventEarthquake clears the "associated_event_earthquake" edge to the Earthquake entity.
func (aeu *AssociatedEventUpdate) ClearAssociatedEventEarthquake() *AssociatedEventUpdate {
	aeu.mutation.ClearAssociatedEventEarthquake()
	return aeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AssociatedEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AssociatedEventUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AssociatedEventUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AssociatedEventUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aeu *AssociatedEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(associatedevent.Table, associatedevent.Columns, sqlgraph.NewFieldSpec(associatedevent.FieldID, field.TypeInt32))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aeu.mutation.MainEventEarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.MainEventEarthquakeTable,
			Columns: []string{associatedevent.MainEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.MainEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.MainEventEarthquakeTable,
			Columns: []string{associatedevent.MainEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeu.mutation.AssociatedEventEarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.AssociatedEventEarthquakeTable,
			Columns: []string{associatedevent.AssociatedEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.AssociatedEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.AssociatedEventEarthquakeTable,
			Columns: []string{associatedevent.AssociatedEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{associatedevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// AssociatedEventUpdateOne is the builder for updating a single AssociatedEvent entity.
type AssociatedEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssociatedEventMutation
}

// SetEarthquakeID sets the "earthquake_id" field.
func (aeuo *AssociatedEventUpdateOne) SetEarthquakeID(i int32) *AssociatedEventUpdateOne {
	aeuo.mutation.SetEarthquakeID(i)
	return aeuo
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (aeuo *AssociatedEventUpdateOne) SetNillableEarthquakeID(i *int32) *AssociatedEventUpdateOne {
	if i != nil {
		aeuo.SetEarthquakeID(*i)
	}
	return aeuo
}

// ClearEarthquakeID clears the value of the "earthquake_id" field.
func (aeuo *AssociatedEventUpdateOne) ClearEarthquakeID() *AssociatedEventUpdateOne {
	aeuo.mutation.ClearEarthquakeID()
	return aeuo
}

// SetAssociateID sets the "associate_id" field.
func (aeuo *AssociatedEventUpdateOne) SetAssociateID(i int32) *AssociatedEventUpdateOne {
	aeuo.mutation.SetAssociateID(i)
	return aeuo
}

// SetNillableAssociateID sets the "associate_id" field if the given value is not nil.
func (aeuo *AssociatedEventUpdateOne) SetNillableAssociateID(i *int32) *AssociatedEventUpdateOne {
	if i != nil {
		aeuo.SetAssociateID(*i)
	}
	return aeuo
}

// ClearAssociateID clears the value of the "associate_id" field.
func (aeuo *AssociatedEventUpdateOne) ClearAssociateID() *AssociatedEventUpdateOne {
	aeuo.mutation.ClearAssociateID()
	return aeuo
}

// SetMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID.
func (aeuo *AssociatedEventUpdateOne) SetMainEventEarthquakeID(id int32) *AssociatedEventUpdateOne {
	aeuo.mutation.SetMainEventEarthquakeID(id)
	return aeuo
}

// SetNillableMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aeuo *AssociatedEventUpdateOne) SetNillableMainEventEarthquakeID(id *int32) *AssociatedEventUpdateOne {
	if id != nil {
		aeuo = aeuo.SetMainEventEarthquakeID(*id)
	}
	return aeuo
}

// SetMainEventEarthquake sets the "main_event_earthquake" edge to the Earthquake entity.
func (aeuo *AssociatedEventUpdateOne) SetMainEventEarthquake(e *Earthquake) *AssociatedEventUpdateOne {
	return aeuo.SetMainEventEarthquakeID(e.ID)
}

// SetAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID.
func (aeuo *AssociatedEventUpdateOne) SetAssociatedEventEarthquakeID(id int32) *AssociatedEventUpdateOne {
	aeuo.mutation.SetAssociatedEventEarthquakeID(id)
	return aeuo
}

// SetNillableAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aeuo *AssociatedEventUpdateOne) SetNillableAssociatedEventEarthquakeID(id *int32) *AssociatedEventUpdateOne {
	if id != nil {
		aeuo = aeuo.SetAssociatedEventEarthquakeID(*id)
	}
	return aeuo
}

// SetAssociatedEventEarthquake sets the "associated_event_earthquake" edge to the Earthquake entity.
func (aeuo *AssociatedEventUpdateOne) SetAssociatedEventEarthquake(e *Earthquake) *AssociatedEventUpdateOne {
	return aeuo.SetAssociatedEventEarthquakeID(e.ID)
}

// Mutation returns the AssociatedEventMutation object of the builder.
func (aeuo *AssociatedEventUpdateOne) Mutation() *AssociatedEventMutation {
	return aeuo.mutation
}

// ClearMainEventEarthquake clears the "main_event_earthquake" edge to the Earthquake entity.
func (aeuo *AssociatedEventUpdateOne) ClearMainEventEarthquake() *AssociatedEventUpdateOne {
	aeuo.mutation.ClearMainEventEarthquake()
	return aeuo
}

// ClearAssociatedEventEarthquake clears the "associated_event_earthquake" edge to the Earthquake entity.
func (aeuo *AssociatedEventUpdateOne) ClearAssociatedEventEarthquake() *AssociatedEventUpdateOne {
	aeuo.mutation.ClearAssociatedEventEarthquake()
	return aeuo
}

// Where appends a list predicates to the AssociatedEventUpdate builder.
func (aeuo *AssociatedEventUpdateOne) Where(ps ...predicate.AssociatedEvent) *AssociatedEventUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AssociatedEventUpdateOne) Select(field string, fields ...string) *AssociatedEventUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AssociatedEvent entity.
func (aeuo *AssociatedEventUpdateOne) Save(ctx context.Context) (*AssociatedEvent, error) {
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AssociatedEventUpdateOne) SaveX(ctx context.Context) *AssociatedEvent {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AssociatedEventUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AssociatedEventUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aeuo *AssociatedEventUpdateOne) sqlSave(ctx context.Context) (_node *AssociatedEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(associatedevent.Table, associatedevent.Columns, sqlgraph.NewFieldSpec(associatedevent.FieldID, field.TypeInt32))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssociatedEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, associatedevent.FieldID)
		for _, f := range fields {
			if !associatedevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != associatedevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aeuo.mutation.MainEventEarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.MainEventEarthquakeTable,
			Columns: []string{associatedevent.MainEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.MainEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.MainEventEarthquakeTable,
			Columns: []string{associatedevent.MainEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aeuo.mutation.AssociatedEventEarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.AssociatedEventEarthquakeTable,
			Columns: []string{associatedevent.AssociatedEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.AssociatedEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.AssociatedEventEarthquakeTable,
			Columns: []string{associatedevent.AssociatedEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssociatedEvent{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{associatedevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
