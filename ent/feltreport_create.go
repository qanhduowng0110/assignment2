// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/earthquake"
	"entdemo/ent/feltreport"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeltReportCreate is the builder for creating a FeltReport entity.
type FeltReportCreate struct {
	config
	mutation *FeltReportMutation
	hooks    []Hook
}

// SetEarthquakeID sets the "earthquake_id" field.
func (frc *FeltReportCreate) SetEarthquakeID(i int32) *FeltReportCreate {
	frc.mutation.SetEarthquakeID(i)
	return frc
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (frc *FeltReportCreate) SetNillableEarthquakeID(i *int32) *FeltReportCreate {
	if i != nil {
		frc.SetEarthquakeID(*i)
	}
	return frc
}

// SetFelt sets the "felt" field.
func (frc *FeltReportCreate) SetFelt(i int32) *FeltReportCreate {
	frc.mutation.SetFelt(i)
	return frc
}

// SetNillableFelt sets the "felt" field if the given value is not nil.
func (frc *FeltReportCreate) SetNillableFelt(i *int32) *FeltReportCreate {
	if i != nil {
		frc.SetFelt(*i)
	}
	return frc
}

// SetCdi sets the "cdi" field.
func (frc *FeltReportCreate) SetCdi(f float64) *FeltReportCreate {
	frc.mutation.SetCdi(f)
	return frc
}

// SetNillableCdi sets the "cdi" field if the given value is not nil.
func (frc *FeltReportCreate) SetNillableCdi(f *float64) *FeltReportCreate {
	if f != nil {
		frc.SetCdi(*f)
	}
	return frc
}

// SetMmi sets the "mmi" field.
func (frc *FeltReportCreate) SetMmi(f float64) *FeltReportCreate {
	frc.mutation.SetMmi(f)
	return frc
}

// SetNillableMmi sets the "mmi" field if the given value is not nil.
func (frc *FeltReportCreate) SetNillableMmi(f *float64) *FeltReportCreate {
	if f != nil {
		frc.SetMmi(*f)
	}
	return frc
}

// SetAlert sets the "alert" field.
func (frc *FeltReportCreate) SetAlert(s string) *FeltReportCreate {
	frc.mutation.SetAlert(s)
	return frc
}

// SetNillableAlert sets the "alert" field if the given value is not nil.
func (frc *FeltReportCreate) SetNillableAlert(s *string) *FeltReportCreate {
	if s != nil {
		frc.SetAlert(*s)
	}
	return frc
}

// SetID sets the "id" field.
func (frc *FeltReportCreate) SetID(i int32) *FeltReportCreate {
	frc.mutation.SetID(i)
	return frc
}

// SetEarthquake sets the "earthquake" edge to the Earthquake entity.
func (frc *FeltReportCreate) SetEarthquake(e *Earthquake) *FeltReportCreate {
	return frc.SetEarthquakeID(e.ID)
}

// Mutation returns the FeltReportMutation object of the builder.
func (frc *FeltReportCreate) Mutation() *FeltReportMutation {
	return frc.mutation
}

// Save creates the FeltReport in the database.
func (frc *FeltReportCreate) Save(ctx context.Context) (*FeltReport, error) {
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FeltReportCreate) SaveX(ctx context.Context) *FeltReport {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FeltReportCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FeltReportCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FeltReportCreate) check() error {
	return nil
}

func (frc *FeltReportCreate) sqlSave(ctx context.Context) (*FeltReport, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FeltReportCreate) createSpec() (*FeltReport, *sqlgraph.CreateSpec) {
	var (
		_node = &FeltReport{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(feltreport.Table, sqlgraph.NewFieldSpec(feltreport.FieldID, field.TypeInt32))
	)
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := frc.mutation.Felt(); ok {
		_spec.SetField(feltreport.FieldFelt, field.TypeInt32, value)
		_node.Felt = value
	}
	if value, ok := frc.mutation.Cdi(); ok {
		_spec.SetField(feltreport.FieldCdi, field.TypeFloat64, value)
		_node.Cdi = value
	}
	if value, ok := frc.mutation.Mmi(); ok {
		_spec.SetField(feltreport.FieldMmi, field.TypeFloat64, value)
		_node.Mmi = value
	}
	if value, ok := frc.mutation.Alert(); ok {
		_spec.SetField(feltreport.FieldAlert, field.TypeString, value)
		_node.Alert = value
	}
	if nodes := frc.mutation.EarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feltreport.EarthquakeTable,
			Columns: []string{feltreport.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EarthquakeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeltReportCreateBulk is the builder for creating many FeltReport entities in bulk.
type FeltReportCreateBulk struct {
	config
	err      error
	builders []*FeltReportCreate
}

// Save creates the FeltReport entities in the database.
func (frcb *FeltReportCreateBulk) Save(ctx context.Context) ([]*FeltReport, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FeltReport, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeltReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FeltReportCreateBulk) SaveX(ctx context.Context) []*FeltReport {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FeltReportCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FeltReportCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
