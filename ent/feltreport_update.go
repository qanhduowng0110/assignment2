// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/earthquake"
	"entdemo/ent/feltreport"
	"entdemo/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeltReportUpdate is the builder for updating FeltReport entities.
type FeltReportUpdate struct {
	config
	hooks    []Hook
	mutation *FeltReportMutation
}

// Where appends a list predicates to the FeltReportUpdate builder.
func (fru *FeltReportUpdate) Where(ps ...predicate.FeltReport) *FeltReportUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetEarthquakeID sets the "earthquake_id" field.
func (fru *FeltReportUpdate) SetEarthquakeID(i int32) *FeltReportUpdate {
	fru.mutation.SetEarthquakeID(i)
	return fru
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (fru *FeltReportUpdate) SetNillableEarthquakeID(i *int32) *FeltReportUpdate {
	if i != nil {
		fru.SetEarthquakeID(*i)
	}
	return fru
}

// ClearEarthquakeID clears the value of the "earthquake_id" field.
func (fru *FeltReportUpdate) ClearEarthquakeID() *FeltReportUpdate {
	fru.mutation.ClearEarthquakeID()
	return fru
}

// SetFelt sets the "felt" field.
func (fru *FeltReportUpdate) SetFelt(i int32) *FeltReportUpdate {
	fru.mutation.ResetFelt()
	fru.mutation.SetFelt(i)
	return fru
}

// SetNillableFelt sets the "felt" field if the given value is not nil.
func (fru *FeltReportUpdate) SetNillableFelt(i *int32) *FeltReportUpdate {
	if i != nil {
		fru.SetFelt(*i)
	}
	return fru
}

// AddFelt adds i to the "felt" field.
func (fru *FeltReportUpdate) AddFelt(i int32) *FeltReportUpdate {
	fru.mutation.AddFelt(i)
	return fru
}

// ClearFelt clears the value of the "felt" field.
func (fru *FeltReportUpdate) ClearFelt() *FeltReportUpdate {
	fru.mutation.ClearFelt()
	return fru
}

// SetCdi sets the "cdi" field.
func (fru *FeltReportUpdate) SetCdi(f float64) *FeltReportUpdate {
	fru.mutation.ResetCdi()
	fru.mutation.SetCdi(f)
	return fru
}

// SetNillableCdi sets the "cdi" field if the given value is not nil.
func (fru *FeltReportUpdate) SetNillableCdi(f *float64) *FeltReportUpdate {
	if f != nil {
		fru.SetCdi(*f)
	}
	return fru
}

// AddCdi adds f to the "cdi" field.
func (fru *FeltReportUpdate) AddCdi(f float64) *FeltReportUpdate {
	fru.mutation.AddCdi(f)
	return fru
}

// ClearCdi clears the value of the "cdi" field.
func (fru *FeltReportUpdate) ClearCdi() *FeltReportUpdate {
	fru.mutation.ClearCdi()
	return fru
}

// SetMmi sets the "mmi" field.
func (fru *FeltReportUpdate) SetMmi(f float64) *FeltReportUpdate {
	fru.mutation.ResetMmi()
	fru.mutation.SetMmi(f)
	return fru
}

// SetNillableMmi sets the "mmi" field if the given value is not nil.
func (fru *FeltReportUpdate) SetNillableMmi(f *float64) *FeltReportUpdate {
	if f != nil {
		fru.SetMmi(*f)
	}
	return fru
}

// AddMmi adds f to the "mmi" field.
func (fru *FeltReportUpdate) AddMmi(f float64) *FeltReportUpdate {
	fru.mutation.AddMmi(f)
	return fru
}

// ClearMmi clears the value of the "mmi" field.
func (fru *FeltReportUpdate) ClearMmi() *FeltReportUpdate {
	fru.mutation.ClearMmi()
	return fru
}

// SetAlert sets the "alert" field.
func (fru *FeltReportUpdate) SetAlert(s string) *FeltReportUpdate {
	fru.mutation.SetAlert(s)
	return fru
}

// SetNillableAlert sets the "alert" field if the given value is not nil.
func (fru *FeltReportUpdate) SetNillableAlert(s *string) *FeltReportUpdate {
	if s != nil {
		fru.SetAlert(*s)
	}
	return fru
}

// ClearAlert clears the value of the "alert" field.
func (fru *FeltReportUpdate) ClearAlert() *FeltReportUpdate {
	fru.mutation.ClearAlert()
	return fru
}

// SetEarthquake sets the "earthquake" edge to the Earthquake entity.
func (fru *FeltReportUpdate) SetEarthquake(e *Earthquake) *FeltReportUpdate {
	return fru.SetEarthquakeID(e.ID)
}

// Mutation returns the FeltReportMutation object of the builder.
func (fru *FeltReportUpdate) Mutation() *FeltReportMutation {
	return fru.mutation
}

// ClearEarthquake clears the "earthquake" edge to the Earthquake entity.
func (fru *FeltReportUpdate) ClearEarthquake() *FeltReportUpdate {
	fru.mutation.ClearEarthquake()
	return fru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FeltReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FeltReportUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FeltReportUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FeltReportUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fru *FeltReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feltreport.Table, feltreport.Columns, sqlgraph.NewFieldSpec(feltreport.FieldID, field.TypeInt32))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.Felt(); ok {
		_spec.SetField(feltreport.FieldFelt, field.TypeInt32, value)
	}
	if value, ok := fru.mutation.AddedFelt(); ok {
		_spec.AddField(feltreport.FieldFelt, field.TypeInt32, value)
	}
	if fru.mutation.FeltCleared() {
		_spec.ClearField(feltreport.FieldFelt, field.TypeInt32)
	}
	if value, ok := fru.mutation.Cdi(); ok {
		_spec.SetField(feltreport.FieldCdi, field.TypeFloat64, value)
	}
	if value, ok := fru.mutation.AddedCdi(); ok {
		_spec.AddField(feltreport.FieldCdi, field.TypeFloat64, value)
	}
	if fru.mutation.CdiCleared() {
		_spec.ClearField(feltreport.FieldCdi, field.TypeFloat64)
	}
	if value, ok := fru.mutation.Mmi(); ok {
		_spec.SetField(feltreport.FieldMmi, field.TypeFloat64, value)
	}
	if value, ok := fru.mutation.AddedMmi(); ok {
		_spec.AddField(feltreport.FieldMmi, field.TypeFloat64, value)
	}
	if fru.mutation.MmiCleared() {
		_spec.ClearField(feltreport.FieldMmi, field.TypeFloat64)
	}
	if value, ok := fru.mutation.Alert(); ok {
		_spec.SetField(feltreport.FieldAlert, field.TypeString, value)
	}
	if fru.mutation.AlertCleared() {
		_spec.ClearField(feltreport.FieldAlert, field.TypeString)
	}
	if fru.mutation.EarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feltreport.EarthquakeTable,
			Columns: []string{feltreport.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.EarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feltreport.EarthquakeTable,
			Columns: []string{feltreport.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feltreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FeltReportUpdateOne is the builder for updating a single FeltReport entity.
type FeltReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeltReportMutation
}

// SetEarthquakeID sets the "earthquake_id" field.
func (fruo *FeltReportUpdateOne) SetEarthquakeID(i int32) *FeltReportUpdateOne {
	fruo.mutation.SetEarthquakeID(i)
	return fruo
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (fruo *FeltReportUpdateOne) SetNillableEarthquakeID(i *int32) *FeltReportUpdateOne {
	if i != nil {
		fruo.SetEarthquakeID(*i)
	}
	return fruo
}

// ClearEarthquakeID clears the value of the "earthquake_id" field.
func (fruo *FeltReportUpdateOne) ClearEarthquakeID() *FeltReportUpdateOne {
	fruo.mutation.ClearEarthquakeID()
	return fruo
}

// SetFelt sets the "felt" field.
func (fruo *FeltReportUpdateOne) SetFelt(i int32) *FeltReportUpdateOne {
	fruo.mutation.ResetFelt()
	fruo.mutation.SetFelt(i)
	return fruo
}

// SetNillableFelt sets the "felt" field if the given value is not nil.
func (fruo *FeltReportUpdateOne) SetNillableFelt(i *int32) *FeltReportUpdateOne {
	if i != nil {
		fruo.SetFelt(*i)
	}
	return fruo
}

// AddFelt adds i to the "felt" field.
func (fruo *FeltReportUpdateOne) AddFelt(i int32) *FeltReportUpdateOne {
	fruo.mutation.AddFelt(i)
	return fruo
}

// ClearFelt clears the value of the "felt" field.
func (fruo *FeltReportUpdateOne) ClearFelt() *FeltReportUpdateOne {
	fruo.mutation.ClearFelt()
	return fruo
}

// SetCdi sets the "cdi" field.
func (fruo *FeltReportUpdateOne) SetCdi(f float64) *FeltReportUpdateOne {
	fruo.mutation.ResetCdi()
	fruo.mutation.SetCdi(f)
	return fruo
}

// SetNillableCdi sets the "cdi" field if the given value is not nil.
func (fruo *FeltReportUpdateOne) SetNillableCdi(f *float64) *FeltReportUpdateOne {
	if f != nil {
		fruo.SetCdi(*f)
	}
	return fruo
}

// AddCdi adds f to the "cdi" field.
func (fruo *FeltReportUpdateOne) AddCdi(f float64) *FeltReportUpdateOne {
	fruo.mutation.AddCdi(f)
	return fruo
}

// ClearCdi clears the value of the "cdi" field.
func (fruo *FeltReportUpdateOne) ClearCdi() *FeltReportUpdateOne {
	fruo.mutation.ClearCdi()
	return fruo
}

// SetMmi sets the "mmi" field.
func (fruo *FeltReportUpdateOne) SetMmi(f float64) *FeltReportUpdateOne {
	fruo.mutation.ResetMmi()
	fruo.mutation.SetMmi(f)
	return fruo
}

// SetNillableMmi sets the "mmi" field if the given value is not nil.
func (fruo *FeltReportUpdateOne) SetNillableMmi(f *float64) *FeltReportUpdateOne {
	if f != nil {
		fruo.SetMmi(*f)
	}
	return fruo
}

// AddMmi adds f to the "mmi" field.
func (fruo *FeltReportUpdateOne) AddMmi(f float64) *FeltReportUpdateOne {
	fruo.mutation.AddMmi(f)
	return fruo
}

// ClearMmi clears the value of the "mmi" field.
func (fruo *FeltReportUpdateOne) ClearMmi() *FeltReportUpdateOne {
	fruo.mutation.ClearMmi()
	return fruo
}

// SetAlert sets the "alert" field.
func (fruo *FeltReportUpdateOne) SetAlert(s string) *FeltReportUpdateOne {
	fruo.mutation.SetAlert(s)
	return fruo
}

// SetNillableAlert sets the "alert" field if the given value is not nil.
func (fruo *FeltReportUpdateOne) SetNillableAlert(s *string) *FeltReportUpdateOne {
	if s != nil {
		fruo.SetAlert(*s)
	}
	return fruo
}

// ClearAlert clears the value of the "alert" field.
func (fruo *FeltReportUpdateOne) ClearAlert() *FeltReportUpdateOne {
	fruo.mutation.ClearAlert()
	return fruo
}

// SetEarthquake sets the "earthquake" edge to the Earthquake entity.
func (fruo *FeltReportUpdateOne) SetEarthquake(e *Earthquake) *FeltReportUpdateOne {
	return fruo.SetEarthquakeID(e.ID)
}

// Mutation returns the FeltReportMutation object of the builder.
func (fruo *FeltReportUpdateOne) Mutation() *FeltReportMutation {
	return fruo.mutation
}

// ClearEarthquake clears the "earthquake" edge to the Earthquake entity.
func (fruo *FeltReportUpdateOne) ClearEarthquake() *FeltReportUpdateOne {
	fruo.mutation.ClearEarthquake()
	return fruo
}

// Where appends a list predicates to the FeltReportUpdate builder.
func (fruo *FeltReportUpdateOne) Where(ps ...predicate.FeltReport) *FeltReportUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FeltReportUpdateOne) Select(field string, fields ...string) *FeltReportUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FeltReport entity.
func (fruo *FeltReportUpdateOne) Save(ctx context.Context) (*FeltReport, error) {
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FeltReportUpdateOne) SaveX(ctx context.Context) *FeltReport {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FeltReportUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FeltReportUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fruo *FeltReportUpdateOne) sqlSave(ctx context.Context) (_node *FeltReport, err error) {
	_spec := sqlgraph.NewUpdateSpec(feltreport.Table, feltreport.Columns, sqlgraph.NewFieldSpec(feltreport.FieldID, field.TypeInt32))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeltReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feltreport.FieldID)
		for _, f := range fields {
			if !feltreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feltreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.Felt(); ok {
		_spec.SetField(feltreport.FieldFelt, field.TypeInt32, value)
	}
	if value, ok := fruo.mutation.AddedFelt(); ok {
		_spec.AddField(feltreport.FieldFelt, field.TypeInt32, value)
	}
	if fruo.mutation.FeltCleared() {
		_spec.ClearField(feltreport.FieldFelt, field.TypeInt32)
	}
	if value, ok := fruo.mutation.Cdi(); ok {
		_spec.SetField(feltreport.FieldCdi, field.TypeFloat64, value)
	}
	if value, ok := fruo.mutation.AddedCdi(); ok {
		_spec.AddField(feltreport.FieldCdi, field.TypeFloat64, value)
	}
	if fruo.mutation.CdiCleared() {
		_spec.ClearField(feltreport.FieldCdi, field.TypeFloat64)
	}
	if value, ok := fruo.mutation.Mmi(); ok {
		_spec.SetField(feltreport.FieldMmi, field.TypeFloat64, value)
	}
	if value, ok := fruo.mutation.AddedMmi(); ok {
		_spec.AddField(feltreport.FieldMmi, field.TypeFloat64, value)
	}
	if fruo.mutation.MmiCleared() {
		_spec.ClearField(feltreport.FieldMmi, field.TypeFloat64)
	}
	if value, ok := fruo.mutation.Alert(); ok {
		_spec.SetField(feltreport.FieldAlert, field.TypeString, value)
	}
	if fruo.mutation.AlertCleared() {
		_spec.ClearField(feltreport.FieldAlert, field.TypeString)
	}
	if fruo.mutation.EarthquakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feltreport.EarthquakeTable,
			Columns: []string{feltreport.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.EarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   feltreport.EarthquakeTable,
			Columns: []string{feltreport.EarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeltReport{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feltreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
