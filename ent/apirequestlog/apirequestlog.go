// Code generated by ent, DO NOT EDIT.

package apirequestlog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the apirequestlog type in the database.
	Label = "api_request_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestDatetime holds the string denoting the request_datetime field in the database.
	FieldRequestDatetime = "request_datetime"
	// FieldRequestParameters holds the string denoting the request_parameters field in the database.
	FieldRequestParameters = "request_parameters"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldRequestHeaders holds the string denoting the request_headers field in the database.
	FieldRequestHeaders = "request_headers"
	// FieldRequestMetadata holds the string denoting the request_metadata field in the database.
	FieldRequestMetadata = "request_metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the apirequestlog in the database.
	Table = "API_request_logs"
)

// Columns holds all SQL columns for apirequestlog fields.
var Columns = []string{
	FieldID,
	FieldRequestDatetime,
	FieldRequestParameters,
	FieldRequestBody,
	FieldRequestHeaders,
	FieldRequestMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the APIRequestLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestDatetime orders the results by the request_datetime field.
func ByRequestDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestDatetime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
