// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/associatedevent"
	"entdemo/ent/earthquake"
	"entdemo/ent/eventtype"
	"entdemo/ent/featuretype"
	"entdemo/ent/feltreport"
	"entdemo/ent/geometry"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EarthquakeCreate is the builder for creating a Earthquake entity.
type EarthquakeCreate struct {
	config
	mutation *EarthquakeMutation
	hooks    []Hook
}

// SetFeatureID sets the "feature_id" field.
func (ec *EarthquakeCreate) SetFeatureID(s string) *EarthquakeCreate {
	ec.mutation.SetFeatureID(s)
	return ec
}

// SetMagnitude sets the "magnitude" field.
func (ec *EarthquakeCreate) SetMagnitude(f float64) *EarthquakeCreate {
	ec.mutation.SetMagnitude(f)
	return ec
}

// SetOccurTime sets the "occur_time" field.
func (ec *EarthquakeCreate) SetOccurTime(t time.Time) *EarthquakeCreate {
	ec.mutation.SetOccurTime(t)
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *EarthquakeCreate) SetUpdateTime(t time.Time) *EarthquakeCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetURL sets the "url" field.
func (ec *EarthquakeCreate) SetURL(s string) *EarthquakeCreate {
	ec.mutation.SetURL(s)
	return ec
}

// SetDetailURL sets the "detail_url" field.
func (ec *EarthquakeCreate) SetDetailURL(s string) *EarthquakeCreate {
	ec.mutation.SetDetailURL(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *EarthquakeCreate) SetStatus(s string) *EarthquakeCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetTsunami sets the "tsunami" field.
func (ec *EarthquakeCreate) SetTsunami(i int32) *EarthquakeCreate {
	ec.mutation.SetTsunami(i)
	return ec
}

// SetSig sets the "sig" field.
func (ec *EarthquakeCreate) SetSig(i int32) *EarthquakeCreate {
	ec.mutation.SetSig(i)
	return ec
}

// SetNet sets the "net" field.
func (ec *EarthquakeCreate) SetNet(s string) *EarthquakeCreate {
	ec.mutation.SetNet(s)
	return ec
}

// SetCode sets the "code" field.
func (ec *EarthquakeCreate) SetCode(s string) *EarthquakeCreate {
	ec.mutation.SetCode(s)
	return ec
}

// SetNst sets the "nst" field.
func (ec *EarthquakeCreate) SetNst(i int32) *EarthquakeCreate {
	ec.mutation.SetNst(i)
	return ec
}

// SetDmin sets the "dmin" field.
func (ec *EarthquakeCreate) SetDmin(f float64) *EarthquakeCreate {
	ec.mutation.SetDmin(f)
	return ec
}

// SetRms sets the "rms" field.
func (ec *EarthquakeCreate) SetRms(f float64) *EarthquakeCreate {
	ec.mutation.SetRms(f)
	return ec
}

// SetGap sets the "gap" field.
func (ec *EarthquakeCreate) SetGap(f float64) *EarthquakeCreate {
	ec.mutation.SetGap(f)
	return ec
}

// SetMagType sets the "mag_type" field.
func (ec *EarthquakeCreate) SetMagType(s string) *EarthquakeCreate {
	ec.mutation.SetMagType(s)
	return ec
}

// SetEarthquakeType sets the "earthquake_type" field.
func (ec *EarthquakeCreate) SetEarthquakeType(s string) *EarthquakeCreate {
	ec.mutation.SetEarthquakeType(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EarthquakeCreate) SetID(i int32) *EarthquakeCreate {
	ec.mutation.SetID(i)
	return ec
}

// AddMainEventIDs adds the "main_events" edge to the AssociatedEvent entity by IDs.
func (ec *EarthquakeCreate) AddMainEventIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddMainEventIDs(ids...)
	return ec
}

// AddMainEvents adds the "main_events" edges to the AssociatedEvent entity.
func (ec *EarthquakeCreate) AddMainEvents(a ...*AssociatedEvent) *EarthquakeCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddMainEventIDs(ids...)
}

// AddAssociatedEventIDs adds the "associated_events" edge to the AssociatedEvent entity by IDs.
func (ec *EarthquakeCreate) AddAssociatedEventIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddAssociatedEventIDs(ids...)
	return ec
}

// AddAssociatedEvents adds the "associated_events" edges to the AssociatedEvent entity.
func (ec *EarthquakeCreate) AddAssociatedEvents(a ...*AssociatedEvent) *EarthquakeCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAssociatedEventIDs(ids...)
}

// AddEventTypeIDs adds the "event_types" edge to the EventType entity by IDs.
func (ec *EarthquakeCreate) AddEventTypeIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddEventTypeIDs(ids...)
	return ec
}

// AddEventTypes adds the "event_types" edges to the EventType entity.
func (ec *EarthquakeCreate) AddEventTypes(e ...*EventType) *EarthquakeCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventTypeIDs(ids...)
}

// AddFeatureTypeIDs adds the "feature_types" edge to the FeatureType entity by IDs.
func (ec *EarthquakeCreate) AddFeatureTypeIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddFeatureTypeIDs(ids...)
	return ec
}

// AddFeatureTypes adds the "feature_types" edges to the FeatureType entity.
func (ec *EarthquakeCreate) AddFeatureTypes(f ...*FeatureType) *EarthquakeCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddFeatureTypeIDs(ids...)
}

// AddFeltReportIDs adds the "felt_reports" edge to the FeltReport entity by IDs.
func (ec *EarthquakeCreate) AddFeltReportIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddFeltReportIDs(ids...)
	return ec
}

// AddFeltReports adds the "felt_reports" edges to the FeltReport entity.
func (ec *EarthquakeCreate) AddFeltReports(f ...*FeltReport) *EarthquakeCreate {
	ids := make([]int32, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddFeltReportIDs(ids...)
}

// AddGeometryIDs adds the "geometries" edge to the Geometry entity by IDs.
func (ec *EarthquakeCreate) AddGeometryIDs(ids ...int32) *EarthquakeCreate {
	ec.mutation.AddGeometryIDs(ids...)
	return ec
}

// AddGeometries adds the "geometries" edges to the Geometry entity.
func (ec *EarthquakeCreate) AddGeometries(g ...*Geometry) *EarthquakeCreate {
	ids := make([]int32, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ec.AddGeometryIDs(ids...)
}

// Mutation returns the EarthquakeMutation object of the builder.
func (ec *EarthquakeCreate) Mutation() *EarthquakeMutation {
	return ec.mutation
}

// Save creates the Earthquake in the database.
func (ec *EarthquakeCreate) Save(ctx context.Context) (*Earthquake, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EarthquakeCreate) SaveX(ctx context.Context) *Earthquake {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EarthquakeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EarthquakeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EarthquakeCreate) check() error {
	if _, ok := ec.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "Earthquake.feature_id"`)}
	}
	if _, ok := ec.mutation.Magnitude(); !ok {
		return &ValidationError{Name: "magnitude", err: errors.New(`ent: missing required field "Earthquake.magnitude"`)}
	}
	if _, ok := ec.mutation.OccurTime(); !ok {
		return &ValidationError{Name: "occur_time", err: errors.New(`ent: missing required field "Earthquake.occur_time"`)}
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Earthquake.update_time"`)}
	}
	if _, ok := ec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Earthquake.url"`)}
	}
	if _, ok := ec.mutation.DetailURL(); !ok {
		return &ValidationError{Name: "detail_url", err: errors.New(`ent: missing required field "Earthquake.detail_url"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Earthquake.status"`)}
	}
	if _, ok := ec.mutation.Tsunami(); !ok {
		return &ValidationError{Name: "tsunami", err: errors.New(`ent: missing required field "Earthquake.tsunami"`)}
	}
	if _, ok := ec.mutation.Sig(); !ok {
		return &ValidationError{Name: "sig", err: errors.New(`ent: missing required field "Earthquake.sig"`)}
	}
	if _, ok := ec.mutation.Net(); !ok {
		return &ValidationError{Name: "net", err: errors.New(`ent: missing required field "Earthquake.net"`)}
	}
	if _, ok := ec.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Earthquake.code"`)}
	}
	if _, ok := ec.mutation.Nst(); !ok {
		return &ValidationError{Name: "nst", err: errors.New(`ent: missing required field "Earthquake.nst"`)}
	}
	if _, ok := ec.mutation.Dmin(); !ok {
		return &ValidationError{Name: "dmin", err: errors.New(`ent: missing required field "Earthquake.dmin"`)}
	}
	if _, ok := ec.mutation.Rms(); !ok {
		return &ValidationError{Name: "rms", err: errors.New(`ent: missing required field "Earthquake.rms"`)}
	}
	if _, ok := ec.mutation.Gap(); !ok {
		return &ValidationError{Name: "gap", err: errors.New(`ent: missing required field "Earthquake.gap"`)}
	}
	if _, ok := ec.mutation.MagType(); !ok {
		return &ValidationError{Name: "mag_type", err: errors.New(`ent: missing required field "Earthquake.mag_type"`)}
	}
	if _, ok := ec.mutation.EarthquakeType(); !ok {
		return &ValidationError{Name: "earthquake_type", err: errors.New(`ent: missing required field "Earthquake.earthquake_type"`)}
	}
	return nil
}

func (ec *EarthquakeCreate) sqlSave(ctx context.Context) (*Earthquake, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EarthquakeCreate) createSpec() (*Earthquake, *sqlgraph.CreateSpec) {
	var (
		_node = &Earthquake{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(earthquake.Table, sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.FeatureID(); ok {
		_spec.SetField(earthquake.FieldFeatureID, field.TypeString, value)
		_node.FeatureID = value
	}
	if value, ok := ec.mutation.Magnitude(); ok {
		_spec.SetField(earthquake.FieldMagnitude, field.TypeFloat64, value)
		_node.Magnitude = value
	}
	if value, ok := ec.mutation.OccurTime(); ok {
		_spec.SetField(earthquake.FieldOccurTime, field.TypeTime, value)
		_node.OccurTime = value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.SetField(earthquake.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ec.mutation.URL(); ok {
		_spec.SetField(earthquake.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ec.mutation.DetailURL(); ok {
		_spec.SetField(earthquake.FieldDetailURL, field.TypeString, value)
		_node.DetailURL = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(earthquake.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Tsunami(); ok {
		_spec.SetField(earthquake.FieldTsunami, field.TypeInt32, value)
		_node.Tsunami = value
	}
	if value, ok := ec.mutation.Sig(); ok {
		_spec.SetField(earthquake.FieldSig, field.TypeInt32, value)
		_node.Sig = value
	}
	if value, ok := ec.mutation.Net(); ok {
		_spec.SetField(earthquake.FieldNet, field.TypeString, value)
		_node.Net = value
	}
	if value, ok := ec.mutation.Code(); ok {
		_spec.SetField(earthquake.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ec.mutation.Nst(); ok {
		_spec.SetField(earthquake.FieldNst, field.TypeInt32, value)
		_node.Nst = value
	}
	if value, ok := ec.mutation.Dmin(); ok {
		_spec.SetField(earthquake.FieldDmin, field.TypeFloat64, value)
		_node.Dmin = value
	}
	if value, ok := ec.mutation.Rms(); ok {
		_spec.SetField(earthquake.FieldRms, field.TypeFloat64, value)
		_node.Rms = value
	}
	if value, ok := ec.mutation.Gap(); ok {
		_spec.SetField(earthquake.FieldGap, field.TypeFloat64, value)
		_node.Gap = value
	}
	if value, ok := ec.mutation.MagType(); ok {
		_spec.SetField(earthquake.FieldMagType, field.TypeString, value)
		_node.MagType = value
	}
	if value, ok := ec.mutation.EarthquakeType(); ok {
		_spec.SetField(earthquake.FieldEarthquakeType, field.TypeString, value)
		_node.EarthquakeType = value
	}
	if nodes := ec.mutation.MainEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.MainEventsTable,
			Columns: []string{earthquake.MainEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(associatedevent.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AssociatedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.AssociatedEventsTable,
			Columns: []string{earthquake.AssociatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(associatedevent.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.EventTypesTable,
			Columns: []string{earthquake.EventTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FeatureTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.FeatureTypesTable,
			Columns: []string{earthquake.FeatureTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuretype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FeltReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.FeltReportsTable,
			Columns: []string{earthquake.FeltReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feltreport.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.GeometriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   earthquake.GeometriesTable,
			Columns: []string{earthquake.GeometriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(geometry.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EarthquakeCreateBulk is the builder for creating many Earthquake entities in bulk.
type EarthquakeCreateBulk struct {
	config
	err      error
	builders []*EarthquakeCreate
}

// Save creates the Earthquake entities in the database.
func (ecb *EarthquakeCreateBulk) Save(ctx context.Context) ([]*Earthquake, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Earthquake, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EarthquakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EarthquakeCreateBulk) SaveX(ctx context.Context) []*Earthquake {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EarthquakeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EarthquakeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
