// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/associatedevent"
	"entdemo/ent/earthquake"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssociatedEventCreate is the builder for creating a AssociatedEvent entity.
type AssociatedEventCreate struct {
	config
	mutation *AssociatedEventMutation
	hooks    []Hook
}

// SetEarthquakeID sets the "earthquake_id" field.
func (aec *AssociatedEventCreate) SetEarthquakeID(i int32) *AssociatedEventCreate {
	aec.mutation.SetEarthquakeID(i)
	return aec
}

// SetNillableEarthquakeID sets the "earthquake_id" field if the given value is not nil.
func (aec *AssociatedEventCreate) SetNillableEarthquakeID(i *int32) *AssociatedEventCreate {
	if i != nil {
		aec.SetEarthquakeID(*i)
	}
	return aec
}

// SetAssociateID sets the "associate_id" field.
func (aec *AssociatedEventCreate) SetAssociateID(i int32) *AssociatedEventCreate {
	aec.mutation.SetAssociateID(i)
	return aec
}

// SetNillableAssociateID sets the "associate_id" field if the given value is not nil.
func (aec *AssociatedEventCreate) SetNillableAssociateID(i *int32) *AssociatedEventCreate {
	if i != nil {
		aec.SetAssociateID(*i)
	}
	return aec
}

// SetID sets the "id" field.
func (aec *AssociatedEventCreate) SetID(i int32) *AssociatedEventCreate {
	aec.mutation.SetID(i)
	return aec
}

// SetMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID.
func (aec *AssociatedEventCreate) SetMainEventEarthquakeID(id int32) *AssociatedEventCreate {
	aec.mutation.SetMainEventEarthquakeID(id)
	return aec
}

// SetNillableMainEventEarthquakeID sets the "main_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aec *AssociatedEventCreate) SetNillableMainEventEarthquakeID(id *int32) *AssociatedEventCreate {
	if id != nil {
		aec = aec.SetMainEventEarthquakeID(*id)
	}
	return aec
}

// SetMainEventEarthquake sets the "main_event_earthquake" edge to the Earthquake entity.
func (aec *AssociatedEventCreate) SetMainEventEarthquake(e *Earthquake) *AssociatedEventCreate {
	return aec.SetMainEventEarthquakeID(e.ID)
}

// SetAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID.
func (aec *AssociatedEventCreate) SetAssociatedEventEarthquakeID(id int32) *AssociatedEventCreate {
	aec.mutation.SetAssociatedEventEarthquakeID(id)
	return aec
}

// SetNillableAssociatedEventEarthquakeID sets the "associated_event_earthquake" edge to the Earthquake entity by ID if the given value is not nil.
func (aec *AssociatedEventCreate) SetNillableAssociatedEventEarthquakeID(id *int32) *AssociatedEventCreate {
	if id != nil {
		aec = aec.SetAssociatedEventEarthquakeID(*id)
	}
	return aec
}

// SetAssociatedEventEarthquake sets the "associated_event_earthquake" edge to the Earthquake entity.
func (aec *AssociatedEventCreate) SetAssociatedEventEarthquake(e *Earthquake) *AssociatedEventCreate {
	return aec.SetAssociatedEventEarthquakeID(e.ID)
}

// Mutation returns the AssociatedEventMutation object of the builder.
func (aec *AssociatedEventCreate) Mutation() *AssociatedEventMutation {
	return aec.mutation
}

// Save creates the AssociatedEvent in the database.
func (aec *AssociatedEventCreate) Save(ctx context.Context) (*AssociatedEvent, error) {
	return withHooks(ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AssociatedEventCreate) SaveX(ctx context.Context) *AssociatedEvent {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AssociatedEventCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AssociatedEventCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AssociatedEventCreate) check() error {
	return nil
}

func (aec *AssociatedEventCreate) sqlSave(ctx context.Context) (*AssociatedEvent, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AssociatedEventCreate) createSpec() (*AssociatedEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &AssociatedEvent{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(associatedevent.Table, sqlgraph.NewFieldSpec(associatedevent.FieldID, field.TypeInt32))
	)
	if id, ok := aec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := aec.mutation.MainEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.MainEventEarthquakeTable,
			Columns: []string{associatedevent.MainEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssociateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aec.mutation.AssociatedEventEarthquakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   associatedevent.AssociatedEventEarthquakeTable,
			Columns: []string{associatedevent.AssociatedEventEarthquakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EarthquakeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssociatedEventCreateBulk is the builder for creating many AssociatedEvent entities in bulk.
type AssociatedEventCreateBulk struct {
	config
	err      error
	builders []*AssociatedEventCreate
}

// Save creates the AssociatedEvent entities in the database.
func (aecb *AssociatedEventCreateBulk) Save(ctx context.Context) ([]*AssociatedEvent, error) {
	if aecb.err != nil {
		return nil, aecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AssociatedEvent, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssociatedEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AssociatedEventCreateBulk) SaveX(ctx context.Context) []*AssociatedEvent {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AssociatedEventCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AssociatedEventCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}
