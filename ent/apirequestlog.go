// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"entdemo/ent/apirequestlog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// APIRequestLog is the model entity for the APIRequestLog schema.
type APIRequestLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RequestDatetime holds the value of the "request_datetime" field.
	RequestDatetime time.Time `json:"request_datetime,omitempty"`
	// RequestParameters holds the value of the "request_parameters" field.
	RequestParameters map[string]interface{} `json:"request_parameters,omitempty"`
	// RequestBody holds the value of the "request_body" field.
	RequestBody map[string]interface{} `json:"request_body,omitempty"`
	// RequestHeaders holds the value of the "request_headers" field.
	RequestHeaders map[string]interface{} `json:"request_headers,omitempty"`
	// RequestMetadata holds the value of the "request_metadata" field.
	RequestMetadata map[string]interface{} `json:"request_metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIRequestLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apirequestlog.FieldRequestParameters, apirequestlog.FieldRequestBody, apirequestlog.FieldRequestHeaders, apirequestlog.FieldRequestMetadata:
			values[i] = new([]byte)
		case apirequestlog.FieldID:
			values[i] = new(sql.NullInt64)
		case apirequestlog.FieldRequestDatetime, apirequestlog.FieldCreatedAt, apirequestlog.FieldUpdatedAt, apirequestlog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIRequestLog fields.
func (arl *APIRequestLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apirequestlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			arl.ID = int(value.Int64)
		case apirequestlog.FieldRequestDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field request_datetime", values[i])
			} else if value.Valid {
				arl.RequestDatetime = value.Time
			}
		case apirequestlog.FieldRequestParameters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_parameters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arl.RequestParameters); err != nil {
					return fmt.Errorf("unmarshal field request_parameters: %w", err)
				}
			}
		case apirequestlog.FieldRequestBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arl.RequestBody); err != nil {
					return fmt.Errorf("unmarshal field request_body: %w", err)
				}
			}
		case apirequestlog.FieldRequestHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arl.RequestHeaders); err != nil {
					return fmt.Errorf("unmarshal field request_headers: %w", err)
				}
			}
		case apirequestlog.FieldRequestMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arl.RequestMetadata); err != nil {
					return fmt.Errorf("unmarshal field request_metadata: %w", err)
				}
			}
		case apirequestlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				arl.CreatedAt = value.Time
			}
		case apirequestlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				arl.UpdatedAt = value.Time
			}
		case apirequestlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				arl.DeletedAt = value.Time
			}
		default:
			arl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APIRequestLog.
// This includes values selected through modifiers, order, etc.
func (arl *APIRequestLog) Value(name string) (ent.Value, error) {
	return arl.selectValues.Get(name)
}

// Update returns a builder for updating this APIRequestLog.
// Note that you need to call APIRequestLog.Unwrap() before calling this method if this APIRequestLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (arl *APIRequestLog) Update() *APIRequestLogUpdateOne {
	return NewAPIRequestLogClient(arl.config).UpdateOne(arl)
}

// Unwrap unwraps the APIRequestLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (arl *APIRequestLog) Unwrap() *APIRequestLog {
	_tx, ok := arl.config.driver.(*txDriver)
	if !ok {
		panic("ent: APIRequestLog is not a transactional entity")
	}
	arl.config.driver = _tx.drv
	return arl
}

// String implements the fmt.Stringer.
func (arl *APIRequestLog) String() string {
	var builder strings.Builder
	builder.WriteString("APIRequestLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", arl.ID))
	builder.WriteString("request_datetime=")
	builder.WriteString(arl.RequestDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("request_parameters=")
	builder.WriteString(fmt.Sprintf("%v", arl.RequestParameters))
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(fmt.Sprintf("%v", arl.RequestBody))
	builder.WriteString(", ")
	builder.WriteString("request_headers=")
	builder.WriteString(fmt.Sprintf("%v", arl.RequestHeaders))
	builder.WriteString(", ")
	builder.WriteString("request_metadata=")
	builder.WriteString(fmt.Sprintf("%v", arl.RequestMetadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(arl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(arl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(arl.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// APIRequestLogs is a parsable slice of APIRequestLog.
type APIRequestLogs []*APIRequestLog
