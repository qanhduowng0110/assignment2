// Code generated by ent, DO NOT EDIT.

package feltreport

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the feltreport type in the database.
	Label = "felt_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEarthquakeID holds the string denoting the earthquake_id field in the database.
	FieldEarthquakeID = "earthquake_id"
	// FieldFelt holds the string denoting the felt field in the database.
	FieldFelt = "felt"
	// FieldCdi holds the string denoting the cdi field in the database.
	FieldCdi = "cdi"
	// FieldMmi holds the string denoting the mmi field in the database.
	FieldMmi = "mmi"
	// FieldAlert holds the string denoting the alert field in the database.
	FieldAlert = "alert"
	// EdgeEarthquake holds the string denoting the earthquake edge name in mutations.
	EdgeEarthquake = "earthquake"
	// Table holds the table name of the feltreport in the database.
	Table = "Felt_reports"
	// EarthquakeTable is the table that holds the earthquake relation/edge.
	EarthquakeTable = "Felt_reports"
	// EarthquakeInverseTable is the table name for the Earthquake entity.
	// It exists in this package in order to avoid circular dependency with the "earthquake" package.
	EarthquakeInverseTable = "Earthquakes"
	// EarthquakeColumn is the table column denoting the earthquake relation/edge.
	EarthquakeColumn = "earthquake_id"
)

// Columns holds all SQL columns for feltreport fields.
var Columns = []string{
	FieldID,
	FieldEarthquakeID,
	FieldFelt,
	FieldCdi,
	FieldMmi,
	FieldAlert,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the FeltReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEarthquakeID orders the results by the earthquake_id field.
func ByEarthquakeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEarthquakeID, opts...).ToFunc()
}

// ByFelt orders the results by the felt field.
func ByFelt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFelt, opts...).ToFunc()
}

// ByCdi orders the results by the cdi field.
func ByCdi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCdi, opts...).ToFunc()
}

// ByMmi orders the results by the mmi field.
func ByMmi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMmi, opts...).ToFunc()
}

// ByAlert orders the results by the alert field.
func ByAlert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlert, opts...).ToFunc()
}

// ByEarthquakeField orders the results by earthquake field.
func ByEarthquakeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarthquakeStep(), sql.OrderByField(field, opts...))
	}
}
func newEarthquakeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarthquakeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EarthquakeTable, EarthquakeColumn),
	)
}
