// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/feltreport"
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeltReportDelete is the builder for deleting a FeltReport entity.
type FeltReportDelete struct {
	config
	hooks    []Hook
	mutation *FeltReportMutation
}

// Where appends a list predicates to the FeltReportDelete builder.
func (frd *FeltReportDelete) Where(ps ...predicate.FeltReport) *FeltReportDelete {
	frd.mutation.Where(ps...)
	return frd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (frd *FeltReportDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, frd.sqlExec, frd.mutation, frd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (frd *FeltReportDelete) ExecX(ctx context.Context) int {
	n, err := frd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (frd *FeltReportDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(feltreport.Table, sqlgraph.NewFieldSpec(feltreport.FieldID, field.TypeInt32))
	if ps := frd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, frd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	frd.mutation.done = true
	return affected, err
}

// FeltReportDeleteOne is the builder for deleting a single FeltReport entity.
type FeltReportDeleteOne struct {
	frd *FeltReportDelete
}

// Where appends a list predicates to the FeltReportDelete builder.
func (frdo *FeltReportDeleteOne) Where(ps ...predicate.FeltReport) *FeltReportDeleteOne {
	frdo.frd.mutation.Where(ps...)
	return frdo
}

// Exec executes the deletion query.
func (frdo *FeltReportDeleteOne) Exec(ctx context.Context) error {
	n, err := frdo.frd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{feltreport.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (frdo *FeltReportDeleteOne) ExecX(ctx context.Context) {
	if err := frdo.Exec(ctx); err != nil {
		panic(err)
	}
}
