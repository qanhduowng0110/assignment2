// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/earthquake"
	"entdemo/ent/feltreport"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FeltReport is the model entity for the FeltReport schema.
type FeltReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// EarthquakeID holds the value of the "earthquake_id" field.
	EarthquakeID int32 `json:"earthquake_id,omitempty"`
	// Felt holds the value of the "felt" field.
	Felt int32 `json:"felt,omitempty"`
	// Cdi holds the value of the "cdi" field.
	Cdi float64 `json:"cdi,omitempty"`
	// Mmi holds the value of the "mmi" field.
	Mmi float64 `json:"mmi,omitempty"`
	// Alert holds the value of the "alert" field.
	Alert string `json:"alert,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeltReportQuery when eager-loading is set.
	Edges        FeltReportEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeltReportEdges holds the relations/edges for other nodes in the graph.
type FeltReportEdges struct {
	// Earthquake holds the value of the earthquake edge.
	Earthquake *Earthquake `json:"earthquake,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EarthquakeOrErr returns the Earthquake value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeltReportEdges) EarthquakeOrErr() (*Earthquake, error) {
	if e.Earthquake != nil {
		return e.Earthquake, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: earthquake.Label}
	}
	return nil, &NotLoadedError{edge: "earthquake"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeltReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feltreport.FieldCdi, feltreport.FieldMmi:
			values[i] = new(sql.NullFloat64)
		case feltreport.FieldID, feltreport.FieldEarthquakeID, feltreport.FieldFelt:
			values[i] = new(sql.NullInt64)
		case feltreport.FieldAlert:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeltReport fields.
func (fr *FeltReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feltreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int32(value.Int64)
		case feltreport.FieldEarthquakeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field earthquake_id", values[i])
			} else if value.Valid {
				fr.EarthquakeID = int32(value.Int64)
			}
		case feltreport.FieldFelt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field felt", values[i])
			} else if value.Valid {
				fr.Felt = int32(value.Int64)
			}
		case feltreport.FieldCdi:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cdi", values[i])
			} else if value.Valid {
				fr.Cdi = value.Float64
			}
		case feltreport.FieldMmi:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mmi", values[i])
			} else if value.Valid {
				fr.Mmi = value.Float64
			}
		case feltreport.FieldAlert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert", values[i])
			} else if value.Valid {
				fr.Alert = value.String
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeltReport.
// This includes values selected through modifiers, order, etc.
func (fr *FeltReport) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// QueryEarthquake queries the "earthquake" edge of the FeltReport entity.
func (fr *FeltReport) QueryEarthquake() *EarthquakeQuery {
	return NewFeltReportClient(fr.config).QueryEarthquake(fr)
}

// Update returns a builder for updating this FeltReport.
// Note that you need to call FeltReport.Unwrap() before calling this method if this FeltReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FeltReport) Update() *FeltReportUpdateOne {
	return NewFeltReportClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FeltReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FeltReport) Unwrap() *FeltReport {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeltReport is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FeltReport) String() string {
	var builder strings.Builder
	builder.WriteString("FeltReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("earthquake_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.EarthquakeID))
	builder.WriteString(", ")
	builder.WriteString("felt=")
	builder.WriteString(fmt.Sprintf("%v", fr.Felt))
	builder.WriteString(", ")
	builder.WriteString("cdi=")
	builder.WriteString(fmt.Sprintf("%v", fr.Cdi))
	builder.WriteString(", ")
	builder.WriteString("mmi=")
	builder.WriteString(fmt.Sprintf("%v", fr.Mmi))
	builder.WriteString(", ")
	builder.WriteString("alert=")
	builder.WriteString(fr.Alert)
	builder.WriteByte(')')
	return builder.String()
}

// FeltReports is a parsable slice of FeltReport.
type FeltReports []*FeltReport
