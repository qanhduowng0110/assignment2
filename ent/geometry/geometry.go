// Code generated by ent, DO NOT EDIT.

package geometry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the geometry type in the database.
	Label = "geometry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEarthquakeID holds the string denoting the earthquake_id field in the database.
	FieldEarthquakeID = "earthquake_id"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldDepth holds the string denoting the depth field in the database.
	FieldDepth = "depth"
	// FieldPlace holds the string denoting the place field in the database.
	FieldPlace = "place"
	// EdgeEarthquake holds the string denoting the earthquake edge name in mutations.
	EdgeEarthquake = "earthquake"
	// Table holds the table name of the geometry in the database.
	Table = "Geometry"
	// EarthquakeTable is the table that holds the earthquake relation/edge.
	EarthquakeTable = "Geometry"
	// EarthquakeInverseTable is the table name for the Earthquake entity.
	// It exists in this package in order to avoid circular dependency with the "earthquake" package.
	EarthquakeInverseTable = "Earthquakes"
	// EarthquakeColumn is the table column denoting the earthquake relation/edge.
	EarthquakeColumn = "earthquake_id"
)

// Columns holds all SQL columns for geometry fields.
var Columns = []string{
	FieldID,
	FieldEarthquakeID,
	FieldLongitude,
	FieldLatitude,
	FieldDepth,
	FieldPlace,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Geometry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEarthquakeID orders the results by the earthquake_id field.
func ByEarthquakeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEarthquakeID, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByDepth orders the results by the depth field.
func ByDepth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepth, opts...).ToFunc()
}

// ByPlace orders the results by the place field.
func ByPlace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlace, opts...).ToFunc()
}

// ByEarthquakeField orders the results by earthquake field.
func ByEarthquakeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarthquakeStep(), sql.OrderByField(field, opts...))
	}
}
func newEarthquakeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarthquakeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EarthquakeTable, EarthquakeColumn),
	)
}
