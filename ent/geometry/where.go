// Code generated by ent, DO NOT EDIT.

package geometry

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldID, id))
}

// EarthquakeID applies equality check predicate on the "earthquake_id" field. It's identical to EarthquakeIDEQ.
func EarthquakeID(v int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldEarthquakeID, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLongitude, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLatitude, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDepth, v))
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldPlace, v))
}

// EarthquakeIDEQ applies the EQ predicate on the "earthquake_id" field.
func EarthquakeIDEQ(v int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldEarthquakeID, v))
}

// EarthquakeIDNEQ applies the NEQ predicate on the "earthquake_id" field.
func EarthquakeIDNEQ(v int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldEarthquakeID, v))
}

// EarthquakeIDIn applies the In predicate on the "earthquake_id" field.
func EarthquakeIDIn(vs ...int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDNotIn applies the NotIn predicate on the "earthquake_id" field.
func EarthquakeIDNotIn(vs ...int32) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDIsNil applies the IsNil predicate on the "earthquake_id" field.
func EarthquakeIDIsNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldIsNull(FieldEarthquakeID))
}

// EarthquakeIDNotNil applies the NotNil predicate on the "earthquake_id" field.
func EarthquakeIDNotNil() predicate.Geometry {
	return predicate.Geometry(sql.FieldNotNull(FieldEarthquakeID))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldLongitude, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldLatitude, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v float64) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldDepth, v))
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldEQ(FieldPlace, v))
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldNEQ(FieldPlace, v))
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.Geometry {
	return predicate.Geometry(sql.FieldIn(FieldPlace, vs...))
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.Geometry {
	return predicate.Geometry(sql.FieldNotIn(FieldPlace, vs...))
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldGT(FieldPlace, v))
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldGTE(FieldPlace, v))
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldLT(FieldPlace, v))
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldLTE(FieldPlace, v))
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldContains(FieldPlace, v))
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldHasPrefix(FieldPlace, v))
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldHasSuffix(FieldPlace, v))
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldEqualFold(FieldPlace, v))
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.Geometry {
	return predicate.Geometry(sql.FieldContainsFold(FieldPlace, v))
}

// HasEarthquake applies the HasEdge predicate on the "earthquake" edge.
func HasEarthquake() predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EarthquakeTable, EarthquakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarthquakeWith applies the HasEdge predicate on the "earthquake" edge with a given conditions (other predicates).
func HasEarthquakeWith(preds ...predicate.Earthquake) predicate.Geometry {
	return predicate.Geometry(func(s *sql.Selector) {
		step := newEarthquakeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Geometry) predicate.Geometry {
	return predicate.Geometry(sql.NotPredicates(p))
}
