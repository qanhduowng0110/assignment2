// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/apirequestlog"
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APIRequestLogDelete is the builder for deleting a APIRequestLog entity.
type APIRequestLogDelete struct {
	config
	hooks    []Hook
	mutation *APIRequestLogMutation
}

// Where appends a list predicates to the APIRequestLogDelete builder.
func (arld *APIRequestLogDelete) Where(ps ...predicate.APIRequestLog) *APIRequestLogDelete {
	arld.mutation.Where(ps...)
	return arld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (arld *APIRequestLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, arld.sqlExec, arld.mutation, arld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (arld *APIRequestLogDelete) ExecX(ctx context.Context) int {
	n, err := arld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (arld *APIRequestLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(apirequestlog.Table, sqlgraph.NewFieldSpec(apirequestlog.FieldID, field.TypeInt))
	if ps := arld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, arld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	arld.mutation.done = true
	return affected, err
}

// APIRequestLogDeleteOne is the builder for deleting a single APIRequestLog entity.
type APIRequestLogDeleteOne struct {
	arld *APIRequestLogDelete
}

// Where appends a list predicates to the APIRequestLogDelete builder.
func (arldo *APIRequestLogDeleteOne) Where(ps ...predicate.APIRequestLog) *APIRequestLogDeleteOne {
	arldo.arld.mutation.Where(ps...)
	return arldo
}

// Exec executes the deletion query.
func (arldo *APIRequestLogDeleteOne) Exec(ctx context.Context) error {
	n, err := arldo.arld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{apirequestlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (arldo *APIRequestLogDeleteOne) ExecX(ctx context.Context) {
	if err := arldo.Exec(ctx); err != nil {
		panic(err)
	}
}
