// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/apirequestlog"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APIRequestLogCreate is the builder for creating a APIRequestLog entity.
type APIRequestLogCreate struct {
	config
	mutation *APIRequestLogMutation
	hooks    []Hook
}

// SetRequestDatetime sets the "request_datetime" field.
func (arlc *APIRequestLogCreate) SetRequestDatetime(t time.Time) *APIRequestLogCreate {
	arlc.mutation.SetRequestDatetime(t)
	return arlc
}

// SetRequestParameters sets the "request_parameters" field.
func (arlc *APIRequestLogCreate) SetRequestParameters(m map[string]interface{}) *APIRequestLogCreate {
	arlc.mutation.SetRequestParameters(m)
	return arlc
}

// SetRequestBody sets the "request_body" field.
func (arlc *APIRequestLogCreate) SetRequestBody(m map[string]interface{}) *APIRequestLogCreate {
	arlc.mutation.SetRequestBody(m)
	return arlc
}

// SetRequestHeaders sets the "request_headers" field.
func (arlc *APIRequestLogCreate) SetRequestHeaders(m map[string]interface{}) *APIRequestLogCreate {
	arlc.mutation.SetRequestHeaders(m)
	return arlc
}

// SetRequestMetadata sets the "request_metadata" field.
func (arlc *APIRequestLogCreate) SetRequestMetadata(m map[string]interface{}) *APIRequestLogCreate {
	arlc.mutation.SetRequestMetadata(m)
	return arlc
}

// SetCreatedAt sets the "created_at" field.
func (arlc *APIRequestLogCreate) SetCreatedAt(t time.Time) *APIRequestLogCreate {
	arlc.mutation.SetCreatedAt(t)
	return arlc
}

// SetUpdatedAt sets the "updated_at" field.
func (arlc *APIRequestLogCreate) SetUpdatedAt(t time.Time) *APIRequestLogCreate {
	arlc.mutation.SetUpdatedAt(t)
	return arlc
}

// SetDeletedAt sets the "deleted_at" field.
func (arlc *APIRequestLogCreate) SetDeletedAt(t time.Time) *APIRequestLogCreate {
	arlc.mutation.SetDeletedAt(t)
	return arlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arlc *APIRequestLogCreate) SetNillableDeletedAt(t *time.Time) *APIRequestLogCreate {
	if t != nil {
		arlc.SetDeletedAt(*t)
	}
	return arlc
}

// SetID sets the "id" field.
func (arlc *APIRequestLogCreate) SetID(i int) *APIRequestLogCreate {
	arlc.mutation.SetID(i)
	return arlc
}

// Mutation returns the APIRequestLogMutation object of the builder.
func (arlc *APIRequestLogCreate) Mutation() *APIRequestLogMutation {
	return arlc.mutation
}

// Save creates the APIRequestLog in the database.
func (arlc *APIRequestLogCreate) Save(ctx context.Context) (*APIRequestLog, error) {
	return withHooks(ctx, arlc.sqlSave, arlc.mutation, arlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arlc *APIRequestLogCreate) SaveX(ctx context.Context) *APIRequestLog {
	v, err := arlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arlc *APIRequestLogCreate) Exec(ctx context.Context) error {
	_, err := arlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arlc *APIRequestLogCreate) ExecX(ctx context.Context) {
	if err := arlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arlc *APIRequestLogCreate) check() error {
	if _, ok := arlc.mutation.RequestDatetime(); !ok {
		return &ValidationError{Name: "request_datetime", err: errors.New(`ent: missing required field "APIRequestLog.request_datetime"`)}
	}
	if _, ok := arlc.mutation.RequestParameters(); !ok {
		return &ValidationError{Name: "request_parameters", err: errors.New(`ent: missing required field "APIRequestLog.request_parameters"`)}
	}
	if _, ok := arlc.mutation.RequestBody(); !ok {
		return &ValidationError{Name: "request_body", err: errors.New(`ent: missing required field "APIRequestLog.request_body"`)}
	}
	if _, ok := arlc.mutation.RequestHeaders(); !ok {
		return &ValidationError{Name: "request_headers", err: errors.New(`ent: missing required field "APIRequestLog.request_headers"`)}
	}
	if _, ok := arlc.mutation.RequestMetadata(); !ok {
		return &ValidationError{Name: "request_metadata", err: errors.New(`ent: missing required field "APIRequestLog.request_metadata"`)}
	}
	if _, ok := arlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "APIRequestLog.created_at"`)}
	}
	if _, ok := arlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "APIRequestLog.updated_at"`)}
	}
	return nil
}

func (arlc *APIRequestLogCreate) sqlSave(ctx context.Context) (*APIRequestLog, error) {
	if err := arlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	arlc.mutation.id = &_node.ID
	arlc.mutation.done = true
	return _node, nil
}

func (arlc *APIRequestLogCreate) createSpec() (*APIRequestLog, *sqlgraph.CreateSpec) {
	var (
		_node = &APIRequestLog{config: arlc.config}
		_spec = sqlgraph.NewCreateSpec(apirequestlog.Table, sqlgraph.NewFieldSpec(apirequestlog.FieldID, field.TypeInt))
	)
	if id, ok := arlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arlc.mutation.RequestDatetime(); ok {
		_spec.SetField(apirequestlog.FieldRequestDatetime, field.TypeTime, value)
		_node.RequestDatetime = value
	}
	if value, ok := arlc.mutation.RequestParameters(); ok {
		_spec.SetField(apirequestlog.FieldRequestParameters, field.TypeJSON, value)
		_node.RequestParameters = value
	}
	if value, ok := arlc.mutation.RequestBody(); ok {
		_spec.SetField(apirequestlog.FieldRequestBody, field.TypeJSON, value)
		_node.RequestBody = value
	}
	if value, ok := arlc.mutation.RequestHeaders(); ok {
		_spec.SetField(apirequestlog.FieldRequestHeaders, field.TypeJSON, value)
		_node.RequestHeaders = value
	}
	if value, ok := arlc.mutation.RequestMetadata(); ok {
		_spec.SetField(apirequestlog.FieldRequestMetadata, field.TypeJSON, value)
		_node.RequestMetadata = value
	}
	if value, ok := arlc.mutation.CreatedAt(); ok {
		_spec.SetField(apirequestlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arlc.mutation.UpdatedAt(); ok {
		_spec.SetField(apirequestlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := arlc.mutation.DeletedAt(); ok {
		_spec.SetField(apirequestlog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// APIRequestLogCreateBulk is the builder for creating many APIRequestLog entities in bulk.
type APIRequestLogCreateBulk struct {
	config
	err      error
	builders []*APIRequestLogCreate
}

// Save creates the APIRequestLog entities in the database.
func (arlcb *APIRequestLogCreateBulk) Save(ctx context.Context) ([]*APIRequestLog, error) {
	if arlcb.err != nil {
		return nil, arlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arlcb.builders))
	nodes := make([]*APIRequestLog, len(arlcb.builders))
	mutators := make([]Mutator, len(arlcb.builders))
	for i := range arlcb.builders {
		func(i int, root context.Context) {
			builder := arlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIRequestLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arlcb *APIRequestLogCreateBulk) SaveX(ctx context.Context) []*APIRequestLog {
	v, err := arlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arlcb *APIRequestLogCreateBulk) Exec(ctx context.Context) error {
	_, err := arlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arlcb *APIRequestLogCreateBulk) ExecX(ctx context.Context) {
	if err := arlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
