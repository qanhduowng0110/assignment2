// Code generated by ent, DO NOT EDIT.

package associatedevent

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldLTE(FieldID, id))
}

// EarthquakeID applies equality check predicate on the "earthquake_id" field. It's identical to EarthquakeIDEQ.
func EarthquakeID(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldEarthquakeID, v))
}

// AssociateID applies equality check predicate on the "associate_id" field. It's identical to AssociateIDEQ.
func AssociateID(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldAssociateID, v))
}

// EarthquakeIDEQ applies the EQ predicate on the "earthquake_id" field.
func EarthquakeIDEQ(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldEarthquakeID, v))
}

// EarthquakeIDNEQ applies the NEQ predicate on the "earthquake_id" field.
func EarthquakeIDNEQ(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNEQ(FieldEarthquakeID, v))
}

// EarthquakeIDIn applies the In predicate on the "earthquake_id" field.
func EarthquakeIDIn(vs ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDNotIn applies the NotIn predicate on the "earthquake_id" field.
func EarthquakeIDNotIn(vs ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNotIn(FieldEarthquakeID, vs...))
}

// EarthquakeIDIsNil applies the IsNil predicate on the "earthquake_id" field.
func EarthquakeIDIsNil() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldIsNull(FieldEarthquakeID))
}

// EarthquakeIDNotNil applies the NotNil predicate on the "earthquake_id" field.
func EarthquakeIDNotNil() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNotNull(FieldEarthquakeID))
}

// AssociateIDEQ applies the EQ predicate on the "associate_id" field.
func AssociateIDEQ(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldEQ(FieldAssociateID, v))
}

// AssociateIDNEQ applies the NEQ predicate on the "associate_id" field.
func AssociateIDNEQ(v int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNEQ(FieldAssociateID, v))
}

// AssociateIDIn applies the In predicate on the "associate_id" field.
func AssociateIDIn(vs ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldIn(FieldAssociateID, vs...))
}

// AssociateIDNotIn applies the NotIn predicate on the "associate_id" field.
func AssociateIDNotIn(vs ...int32) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNotIn(FieldAssociateID, vs...))
}

// AssociateIDIsNil applies the IsNil predicate on the "associate_id" field.
func AssociateIDIsNil() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldIsNull(FieldAssociateID))
}

// AssociateIDNotNil applies the NotNil predicate on the "associate_id" field.
func AssociateIDNotNil() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.FieldNotNull(FieldAssociateID))
}

// HasMainEventEarthquake applies the HasEdge predicate on the "main_event_earthquake" edge.
func HasMainEventEarthquake() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MainEventEarthquakeTable, MainEventEarthquakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMainEventEarthquakeWith applies the HasEdge predicate on the "main_event_earthquake" edge with a given conditions (other predicates).
func HasMainEventEarthquakeWith(preds ...predicate.Earthquake) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(func(s *sql.Selector) {
		step := newMainEventEarthquakeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssociatedEventEarthquake applies the HasEdge predicate on the "associated_event_earthquake" edge.
func HasAssociatedEventEarthquake() predicate.AssociatedEvent {
	return predicate.AssociatedEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssociatedEventEarthquakeTable, AssociatedEventEarthquakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssociatedEventEarthquakeWith applies the HasEdge predicate on the "associated_event_earthquake" edge with a given conditions (other predicates).
func HasAssociatedEventEarthquakeWith(preds ...predicate.Earthquake) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(func(s *sql.Selector) {
		step := newAssociatedEventEarthquakeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssociatedEvent) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssociatedEvent) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssociatedEvent) predicate.AssociatedEvent {
	return predicate.AssociatedEvent(sql.NotPredicates(p))
}
