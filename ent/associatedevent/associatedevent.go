// Code generated by ent, DO NOT EDIT.

package associatedevent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the associatedevent type in the database.
	Label = "associated_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEarthquakeID holds the string denoting the earthquake_id field in the database.
	FieldEarthquakeID = "earthquake_id"
	// FieldAssociateID holds the string denoting the associate_id field in the database.
	FieldAssociateID = "associate_id"
	// EdgeMainEventEarthquake holds the string denoting the main_event_earthquake edge name in mutations.
	EdgeMainEventEarthquake = "main_event_earthquake"
	// EdgeAssociatedEventEarthquake holds the string denoting the associated_event_earthquake edge name in mutations.
	EdgeAssociatedEventEarthquake = "associated_event_earthquake"
	// Table holds the table name of the associatedevent in the database.
	Table = "Associated_events"
	// MainEventEarthquakeTable is the table that holds the main_event_earthquake relation/edge.
	MainEventEarthquakeTable = "Associated_events"
	// MainEventEarthquakeInverseTable is the table name for the Earthquake entity.
	// It exists in this package in order to avoid circular dependency with the "earthquake" package.
	MainEventEarthquakeInverseTable = "Earthquakes"
	// MainEventEarthquakeColumn is the table column denoting the main_event_earthquake relation/edge.
	MainEventEarthquakeColumn = "associate_id"
	// AssociatedEventEarthquakeTable is the table that holds the associated_event_earthquake relation/edge.
	AssociatedEventEarthquakeTable = "Associated_events"
	// AssociatedEventEarthquakeInverseTable is the table name for the Earthquake entity.
	// It exists in this package in order to avoid circular dependency with the "earthquake" package.
	AssociatedEventEarthquakeInverseTable = "Earthquakes"
	// AssociatedEventEarthquakeColumn is the table column denoting the associated_event_earthquake relation/edge.
	AssociatedEventEarthquakeColumn = "earthquake_id"
)

// Columns holds all SQL columns for associatedevent fields.
var Columns = []string{
	FieldID,
	FieldEarthquakeID,
	FieldAssociateID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AssociatedEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEarthquakeID orders the results by the earthquake_id field.
func ByEarthquakeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEarthquakeID, opts...).ToFunc()
}

// ByAssociateID orders the results by the associate_id field.
func ByAssociateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssociateID, opts...).ToFunc()
}

// ByMainEventEarthquakeField orders the results by main_event_earthquake field.
func ByMainEventEarthquakeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMainEventEarthquakeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssociatedEventEarthquakeField orders the results by associated_event_earthquake field.
func ByAssociatedEventEarthquakeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssociatedEventEarthquakeStep(), sql.OrderByField(field, opts...))
	}
}
func newMainEventEarthquakeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MainEventEarthquakeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MainEventEarthquakeTable, MainEventEarthquakeColumn),
	)
}
func newAssociatedEventEarthquakeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssociatedEventEarthquakeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssociatedEventEarthquakeTable, AssociatedEventEarthquakeColumn),
	)
}
