// Code generated by ent, DO NOT EDIT.

package sourceearthquake

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sourceearthquake type in the database.
	Label = "source_earthquake"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEqID holds the string denoting the eq_id field in the database.
	FieldEqID = "eq_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeEarthquake holds the string denoting the earthquake edge name in mutations.
	EdgeEarthquake = "earthquake"
	// Table holds the table name of the sourceearthquake in the database.
	Table = "source_earthquake"
	// EarthquakeTable is the table that holds the earthquake relation/edge.
	EarthquakeTable = "source_earthquake"
	// EarthquakeInverseTable is the table name for the Earthquake entity.
	// It exists in this package in order to avoid circular dependency with the "earthquake" package.
	EarthquakeInverseTable = "earthquake"
	// EarthquakeColumn is the table column denoting the earthquake relation/edge.
	EarthquakeColumn = "eq_id"
)

// Columns holds all SQL columns for sourceearthquake fields.
var Columns = []string{
	FieldID,
	FieldEqID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SourceEarthquake queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEqID orders the results by the eq_id field.
func ByEqID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEqID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEarthquakeField orders the results by earthquake field.
func ByEarthquakeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEarthquakeStep(), sql.OrderByField(field, opts...))
	}
}
func newEarthquakeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EarthquakeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EarthquakeTable, EarthquakeColumn),
	)
}
