// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"entdemo/ent/migrate"

	"entdemo/ent/apirequestlog"
	"entdemo/ent/associatedevent"
	"entdemo/ent/earthquake"
	"entdemo/ent/earthquake_db"
	"entdemo/ent/eventtype"
	"entdemo/ent/featuretype"
	"entdemo/ent/feltreport"
	"entdemo/ent/geometry"
	"entdemo/ent/schemamigration"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APIRequestLog is the client for interacting with the APIRequestLog builders.
	APIRequestLog *APIRequestLogClient
	// AssociatedEvent is the client for interacting with the AssociatedEvent builders.
	AssociatedEvent *AssociatedEventClient
	// Earthquake is the client for interacting with the Earthquake builders.
	Earthquake *EarthquakeClient
	// Earthquake_db is the client for interacting with the Earthquake_db builders.
	Earthquake_db *EarthquakeDbClient
	// EventType is the client for interacting with the EventType builders.
	EventType *EventTypeClient
	// FeatureType is the client for interacting with the FeatureType builders.
	FeatureType *FeatureTypeClient
	// FeltReport is the client for interacting with the FeltReport builders.
	FeltReport *FeltReportClient
	// Geometry is the client for interacting with the Geometry builders.
	Geometry *GeometryClient
	// SchemaMigration is the client for interacting with the SchemaMigration builders.
	SchemaMigration *SchemaMigrationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APIRequestLog = NewAPIRequestLogClient(c.config)
	c.AssociatedEvent = NewAssociatedEventClient(c.config)
	c.Earthquake = NewEarthquakeClient(c.config)
	c.Earthquake_db = NewEarthquakeDbClient(c.config)
	c.EventType = NewEventTypeClient(c.config)
	c.FeatureType = NewFeatureTypeClient(c.config)
	c.FeltReport = NewFeltReportClient(c.config)
	c.Geometry = NewGeometryClient(c.config)
	c.SchemaMigration = NewSchemaMigrationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		APIRequestLog:   NewAPIRequestLogClient(cfg),
		AssociatedEvent: NewAssociatedEventClient(cfg),
		Earthquake:      NewEarthquakeClient(cfg),
		Earthquake_db:   NewEarthquakeDbClient(cfg),
		EventType:       NewEventTypeClient(cfg),
		FeatureType:     NewFeatureTypeClient(cfg),
		FeltReport:      NewFeltReportClient(cfg),
		Geometry:        NewGeometryClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		APIRequestLog:   NewAPIRequestLogClient(cfg),
		AssociatedEvent: NewAssociatedEventClient(cfg),
		Earthquake:      NewEarthquakeClient(cfg),
		Earthquake_db:   NewEarthquakeDbClient(cfg),
		EventType:       NewEventTypeClient(cfg),
		FeatureType:     NewFeatureTypeClient(cfg),
		FeltReport:      NewFeltReportClient(cfg),
		Geometry:        NewGeometryClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APIRequestLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APIRequestLog, c.AssociatedEvent, c.Earthquake, c.Earthquake_db, c.EventType,
		c.FeatureType, c.FeltReport, c.Geometry, c.SchemaMigration,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APIRequestLog, c.AssociatedEvent, c.Earthquake, c.Earthquake_db, c.EventType,
		c.FeatureType, c.FeltReport, c.Geometry, c.SchemaMigration,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APIRequestLogMutation:
		return c.APIRequestLog.mutate(ctx, m)
	case *AssociatedEventMutation:
		return c.AssociatedEvent.mutate(ctx, m)
	case *EarthquakeMutation:
		return c.Earthquake.mutate(ctx, m)
	case *EarthquakeDbMutation:
		return c.Earthquake_db.mutate(ctx, m)
	case *EventTypeMutation:
		return c.EventType.mutate(ctx, m)
	case *FeatureTypeMutation:
		return c.FeatureType.mutate(ctx, m)
	case *FeltReportMutation:
		return c.FeltReport.mutate(ctx, m)
	case *GeometryMutation:
		return c.Geometry.mutate(ctx, m)
	case *SchemaMigrationMutation:
		return c.SchemaMigration.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APIRequestLogClient is a client for the APIRequestLog schema.
type APIRequestLogClient struct {
	config
}

// NewAPIRequestLogClient returns a client for the APIRequestLog from the given config.
func NewAPIRequestLogClient(c config) *APIRequestLogClient {
	return &APIRequestLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apirequestlog.Hooks(f(g(h())))`.
func (c *APIRequestLogClient) Use(hooks ...Hook) {
	c.hooks.APIRequestLog = append(c.hooks.APIRequestLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apirequestlog.Intercept(f(g(h())))`.
func (c *APIRequestLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.APIRequestLog = append(c.inters.APIRequestLog, interceptors...)
}

// Create returns a builder for creating a APIRequestLog entity.
func (c *APIRequestLogClient) Create() *APIRequestLogCreate {
	mutation := newAPIRequestLogMutation(c.config, OpCreate)
	return &APIRequestLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APIRequestLog entities.
func (c *APIRequestLogClient) CreateBulk(builders ...*APIRequestLogCreate) *APIRequestLogCreateBulk {
	return &APIRequestLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *APIRequestLogClient) MapCreateBulk(slice any, setFunc func(*APIRequestLogCreate, int)) *APIRequestLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &APIRequestLogCreateBulk{err: fmt.Errorf("calling to APIRequestLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*APIRequestLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &APIRequestLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APIRequestLog.
func (c *APIRequestLogClient) Update() *APIRequestLogUpdate {
	mutation := newAPIRequestLogMutation(c.config, OpUpdate)
	return &APIRequestLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APIRequestLogClient) UpdateOne(arl *APIRequestLog) *APIRequestLogUpdateOne {
	mutation := newAPIRequestLogMutation(c.config, OpUpdateOne, withAPIRequestLog(arl))
	return &APIRequestLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APIRequestLogClient) UpdateOneID(id int) *APIRequestLogUpdateOne {
	mutation := newAPIRequestLogMutation(c.config, OpUpdateOne, withAPIRequestLogID(id))
	return &APIRequestLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APIRequestLog.
func (c *APIRequestLogClient) Delete() *APIRequestLogDelete {
	mutation := newAPIRequestLogMutation(c.config, OpDelete)
	return &APIRequestLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APIRequestLogClient) DeleteOne(arl *APIRequestLog) *APIRequestLogDeleteOne {
	return c.DeleteOneID(arl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APIRequestLogClient) DeleteOneID(id int) *APIRequestLogDeleteOne {
	builder := c.Delete().Where(apirequestlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIRequestLogDeleteOne{builder}
}

// Query returns a query builder for APIRequestLog.
func (c *APIRequestLogClient) Query() *APIRequestLogQuery {
	return &APIRequestLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPIRequestLog},
		inters: c.Interceptors(),
	}
}

// Get returns a APIRequestLog entity by its id.
func (c *APIRequestLogClient) Get(ctx context.Context, id int) (*APIRequestLog, error) {
	return c.Query().Where(apirequestlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APIRequestLogClient) GetX(ctx context.Context, id int) *APIRequestLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *APIRequestLogClient) Hooks() []Hook {
	return c.hooks.APIRequestLog
}

// Interceptors returns the client interceptors.
func (c *APIRequestLogClient) Interceptors() []Interceptor {
	return c.inters.APIRequestLog
}

func (c *APIRequestLogClient) mutate(ctx context.Context, m *APIRequestLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APIRequestLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APIRequestLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APIRequestLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APIRequestLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APIRequestLog mutation op: %q", m.Op())
	}
}

// AssociatedEventClient is a client for the AssociatedEvent schema.
type AssociatedEventClient struct {
	config
}

// NewAssociatedEventClient returns a client for the AssociatedEvent from the given config.
func NewAssociatedEventClient(c config) *AssociatedEventClient {
	return &AssociatedEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `associatedevent.Hooks(f(g(h())))`.
func (c *AssociatedEventClient) Use(hooks ...Hook) {
	c.hooks.AssociatedEvent = append(c.hooks.AssociatedEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `associatedevent.Intercept(f(g(h())))`.
func (c *AssociatedEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssociatedEvent = append(c.inters.AssociatedEvent, interceptors...)
}

// Create returns a builder for creating a AssociatedEvent entity.
func (c *AssociatedEventClient) Create() *AssociatedEventCreate {
	mutation := newAssociatedEventMutation(c.config, OpCreate)
	return &AssociatedEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssociatedEvent entities.
func (c *AssociatedEventClient) CreateBulk(builders ...*AssociatedEventCreate) *AssociatedEventCreateBulk {
	return &AssociatedEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssociatedEventClient) MapCreateBulk(slice any, setFunc func(*AssociatedEventCreate, int)) *AssociatedEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssociatedEventCreateBulk{err: fmt.Errorf("calling to AssociatedEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssociatedEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssociatedEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssociatedEvent.
func (c *AssociatedEventClient) Update() *AssociatedEventUpdate {
	mutation := newAssociatedEventMutation(c.config, OpUpdate)
	return &AssociatedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssociatedEventClient) UpdateOne(ae *AssociatedEvent) *AssociatedEventUpdateOne {
	mutation := newAssociatedEventMutation(c.config, OpUpdateOne, withAssociatedEvent(ae))
	return &AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssociatedEventClient) UpdateOneID(id int32) *AssociatedEventUpdateOne {
	mutation := newAssociatedEventMutation(c.config, OpUpdateOne, withAssociatedEventID(id))
	return &AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssociatedEvent.
func (c *AssociatedEventClient) Delete() *AssociatedEventDelete {
	mutation := newAssociatedEventMutation(c.config, OpDelete)
	return &AssociatedEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssociatedEventClient) DeleteOne(ae *AssociatedEvent) *AssociatedEventDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssociatedEventClient) DeleteOneID(id int32) *AssociatedEventDeleteOne {
	builder := c.Delete().Where(associatedevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssociatedEventDeleteOne{builder}
}

// Query returns a query builder for AssociatedEvent.
func (c *AssociatedEventClient) Query() *AssociatedEventQuery {
	return &AssociatedEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssociatedEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a AssociatedEvent entity by its id.
func (c *AssociatedEventClient) Get(ctx context.Context, id int32) (*AssociatedEvent, error) {
	return c.Query().Where(associatedevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssociatedEventClient) GetX(ctx context.Context, id int32) *AssociatedEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMainEventEarthquake queries the main_event_earthquake edge of a AssociatedEvent.
func (c *AssociatedEventClient) QueryMainEventEarthquake(ae *AssociatedEvent) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ae.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(associatedevent.Table, associatedevent.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, associatedevent.MainEventEarthquakeTable, associatedevent.MainEventEarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(ae.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssociatedEventEarthquake queries the associated_event_earthquake edge of a AssociatedEvent.
func (c *AssociatedEventClient) QueryAssociatedEventEarthquake(ae *AssociatedEvent) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ae.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(associatedevent.Table, associatedevent.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, associatedevent.AssociatedEventEarthquakeTable, associatedevent.AssociatedEventEarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(ae.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssociatedEventClient) Hooks() []Hook {
	return c.hooks.AssociatedEvent
}

// Interceptors returns the client interceptors.
func (c *AssociatedEventClient) Interceptors() []Interceptor {
	return c.inters.AssociatedEvent
}

func (c *AssociatedEventClient) mutate(ctx context.Context, m *AssociatedEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssociatedEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssociatedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssociatedEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssociatedEvent mutation op: %q", m.Op())
	}
}

// EarthquakeClient is a client for the Earthquake schema.
type EarthquakeClient struct {
	config
}

// NewEarthquakeClient returns a client for the Earthquake from the given config.
func NewEarthquakeClient(c config) *EarthquakeClient {
	return &EarthquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `earthquake.Hooks(f(g(h())))`.
func (c *EarthquakeClient) Use(hooks ...Hook) {
	c.hooks.Earthquake = append(c.hooks.Earthquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `earthquake.Intercept(f(g(h())))`.
func (c *EarthquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Earthquake = append(c.inters.Earthquake, interceptors...)
}

// Create returns a builder for creating a Earthquake entity.
func (c *EarthquakeClient) Create() *EarthquakeCreate {
	mutation := newEarthquakeMutation(c.config, OpCreate)
	return &EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Earthquake entities.
func (c *EarthquakeClient) CreateBulk(builders ...*EarthquakeCreate) *EarthquakeCreateBulk {
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EarthquakeClient) MapCreateBulk(slice any, setFunc func(*EarthquakeCreate, int)) *EarthquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EarthquakeCreateBulk{err: fmt.Errorf("calling to EarthquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EarthquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Earthquake.
func (c *EarthquakeClient) Update() *EarthquakeUpdate {
	mutation := newEarthquakeMutation(c.config, OpUpdate)
	return &EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EarthquakeClient) UpdateOne(e *Earthquake) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquake(e))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EarthquakeClient) UpdateOneID(id int32) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquakeID(id))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Earthquake.
func (c *EarthquakeClient) Delete() *EarthquakeDelete {
	mutation := newEarthquakeMutation(c.config, OpDelete)
	return &EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EarthquakeClient) DeleteOne(e *Earthquake) *EarthquakeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EarthquakeClient) DeleteOneID(id int32) *EarthquakeDeleteOne {
	builder := c.Delete().Where(earthquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EarthquakeDeleteOne{builder}
}

// Query returns a query builder for Earthquake.
func (c *EarthquakeClient) Query() *EarthquakeQuery {
	return &EarthquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEarthquake},
		inters: c.Interceptors(),
	}
}

// Get returns a Earthquake entity by its id.
func (c *EarthquakeClient) Get(ctx context.Context, id int32) (*Earthquake, error) {
	return c.Query().Where(earthquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EarthquakeClient) GetX(ctx context.Context, id int32) *Earthquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMainEvents queries the main_events edge of a Earthquake.
func (c *EarthquakeClient) QueryMainEvents(e *Earthquake) *AssociatedEventQuery {
	query := (&AssociatedEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(associatedevent.Table, associatedevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.MainEventsTable, earthquake.MainEventsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssociatedEvents queries the associated_events edge of a Earthquake.
func (c *EarthquakeClient) QueryAssociatedEvents(e *Earthquake) *AssociatedEventQuery {
	query := (&AssociatedEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(associatedevent.Table, associatedevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.AssociatedEventsTable, earthquake.AssociatedEventsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventTypes queries the event_types edge of a Earthquake.
func (c *EarthquakeClient) QueryEventTypes(e *Earthquake) *EventTypeQuery {
	query := (&EventTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(eventtype.Table, eventtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.EventTypesTable, earthquake.EventTypesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatureTypes queries the feature_types edge of a Earthquake.
func (c *EarthquakeClient) QueryFeatureTypes(e *Earthquake) *FeatureTypeQuery {
	query := (&FeatureTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(featuretype.Table, featuretype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.FeatureTypesTable, earthquake.FeatureTypesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeltReports queries the felt_reports edge of a Earthquake.
func (c *EarthquakeClient) QueryFeltReports(e *Earthquake) *FeltReportQuery {
	query := (&FeltReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(feltreport.Table, feltreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.FeltReportsTable, earthquake.FeltReportsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGeometries queries the geometries edge of a Earthquake.
func (c *EarthquakeClient) QueryGeometries(e *Earthquake) *GeometryQuery {
	query := (&GeometryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(geometry.Table, geometry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.GeometriesTable, earthquake.GeometriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EarthquakeClient) Hooks() []Hook {
	return c.hooks.Earthquake
}

// Interceptors returns the client interceptors.
func (c *EarthquakeClient) Interceptors() []Interceptor {
	return c.inters.Earthquake
}

func (c *EarthquakeClient) mutate(ctx context.Context, m *EarthquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Earthquake mutation op: %q", m.Op())
	}
}

// EarthquakeDbClient is a client for the Earthquake_db schema.
type EarthquakeDbClient struct {
	config
}

// NewEarthquakeDbClient returns a client for the Earthquake_db from the given config.
func NewEarthquakeDbClient(c config) *EarthquakeDbClient {
	return &EarthquakeDbClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `earthquake_db.Hooks(f(g(h())))`.
func (c *EarthquakeDbClient) Use(hooks ...Hook) {
	c.hooks.Earthquake_db = append(c.hooks.Earthquake_db, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `earthquake_db.Intercept(f(g(h())))`.
func (c *EarthquakeDbClient) Intercept(interceptors ...Interceptor) {
	c.inters.Earthquake_db = append(c.inters.Earthquake_db, interceptors...)
}

// Create returns a builder for creating a Earthquake_db entity.
func (c *EarthquakeDbClient) Create() *EarthquakeDbCreate {
	mutation := newEarthquakeDbMutation(c.config, OpCreate)
	return &EarthquakeDbCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Earthquake_db entities.
func (c *EarthquakeDbClient) CreateBulk(builders ...*EarthquakeDbCreate) *EarthquakeDbCreateBulk {
	return &EarthquakeDbCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EarthquakeDbClient) MapCreateBulk(slice any, setFunc func(*EarthquakeDbCreate, int)) *EarthquakeDbCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EarthquakeDbCreateBulk{err: fmt.Errorf("calling to EarthquakeDbClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EarthquakeDbCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EarthquakeDbCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Earthquake_db.
func (c *EarthquakeDbClient) Update() *EarthquakeDbUpdate {
	mutation := newEarthquakeDbMutation(c.config, OpUpdate)
	return &EarthquakeDbUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EarthquakeDbClient) UpdateOne(ed *Earthquake_db) *EarthquakeDbUpdateOne {
	mutation := newEarthquakeDbMutation(c.config, OpUpdateOne, withEarthquake_db(ed))
	return &EarthquakeDbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EarthquakeDbClient) UpdateOneID(id int) *EarthquakeDbUpdateOne {
	mutation := newEarthquakeDbMutation(c.config, OpUpdateOne, withEarthquake_dbID(id))
	return &EarthquakeDbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Earthquake_db.
func (c *EarthquakeDbClient) Delete() *EarthquakeDbDelete {
	mutation := newEarthquakeDbMutation(c.config, OpDelete)
	return &EarthquakeDbDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EarthquakeDbClient) DeleteOne(ed *Earthquake_db) *EarthquakeDbDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EarthquakeDbClient) DeleteOneID(id int) *EarthquakeDbDeleteOne {
	builder := c.Delete().Where(earthquake_db.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EarthquakeDbDeleteOne{builder}
}

// Query returns a query builder for Earthquake_db.
func (c *EarthquakeDbClient) Query() *EarthquakeDbQuery {
	return &EarthquakeDbQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEarthquakeDb},
		inters: c.Interceptors(),
	}
}

// Get returns a Earthquake_db entity by its id.
func (c *EarthquakeDbClient) Get(ctx context.Context, id int) (*Earthquake_db, error) {
	return c.Query().Where(earthquake_db.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EarthquakeDbClient) GetX(ctx context.Context, id int) *Earthquake_db {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EarthquakeDbClient) Hooks() []Hook {
	return c.hooks.Earthquake_db
}

// Interceptors returns the client interceptors.
func (c *EarthquakeDbClient) Interceptors() []Interceptor {
	return c.inters.Earthquake_db
}

func (c *EarthquakeDbClient) mutate(ctx context.Context, m *EarthquakeDbMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EarthquakeDbCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EarthquakeDbUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EarthquakeDbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EarthquakeDbDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Earthquake_db mutation op: %q", m.Op())
	}
}

// EventTypeClient is a client for the EventType schema.
type EventTypeClient struct {
	config
}

// NewEventTypeClient returns a client for the EventType from the given config.
func NewEventTypeClient(c config) *EventTypeClient {
	return &EventTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventtype.Hooks(f(g(h())))`.
func (c *EventTypeClient) Use(hooks ...Hook) {
	c.hooks.EventType = append(c.hooks.EventType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eventtype.Intercept(f(g(h())))`.
func (c *EventTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.EventType = append(c.inters.EventType, interceptors...)
}

// Create returns a builder for creating a EventType entity.
func (c *EventTypeClient) Create() *EventTypeCreate {
	mutation := newEventTypeMutation(c.config, OpCreate)
	return &EventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventType entities.
func (c *EventTypeClient) CreateBulk(builders ...*EventTypeCreate) *EventTypeCreateBulk {
	return &EventTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EventTypeClient) MapCreateBulk(slice any, setFunc func(*EventTypeCreate, int)) *EventTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EventTypeCreateBulk{err: fmt.Errorf("calling to EventTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EventTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EventTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventType.
func (c *EventTypeClient) Update() *EventTypeUpdate {
	mutation := newEventTypeMutation(c.config, OpUpdate)
	return &EventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventTypeClient) UpdateOne(et *EventType) *EventTypeUpdateOne {
	mutation := newEventTypeMutation(c.config, OpUpdateOne, withEventType(et))
	return &EventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventTypeClient) UpdateOneID(id int32) *EventTypeUpdateOne {
	mutation := newEventTypeMutation(c.config, OpUpdateOne, withEventTypeID(id))
	return &EventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventType.
func (c *EventTypeClient) Delete() *EventTypeDelete {
	mutation := newEventTypeMutation(c.config, OpDelete)
	return &EventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventTypeClient) DeleteOne(et *EventType) *EventTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventTypeClient) DeleteOneID(id int32) *EventTypeDeleteOne {
	builder := c.Delete().Where(eventtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventTypeDeleteOne{builder}
}

// Query returns a query builder for EventType.
func (c *EventTypeClient) Query() *EventTypeQuery {
	return &EventTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEventType},
		inters: c.Interceptors(),
	}
}

// Get returns a EventType entity by its id.
func (c *EventTypeClient) Get(ctx context.Context, id int32) (*EventType, error) {
	return c.Query().Where(eventtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventTypeClient) GetX(ctx context.Context, id int32) *EventType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a EventType.
func (c *EventTypeClient) QueryEarthquake(et *EventType) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventtype.Table, eventtype.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventtype.EarthquakeTable, eventtype.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventTypeClient) Hooks() []Hook {
	return c.hooks.EventType
}

// Interceptors returns the client interceptors.
func (c *EventTypeClient) Interceptors() []Interceptor {
	return c.inters.EventType
}

func (c *EventTypeClient) mutate(ctx context.Context, m *EventTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EventType mutation op: %q", m.Op())
	}
}

// FeatureTypeClient is a client for the FeatureType schema.
type FeatureTypeClient struct {
	config
}

// NewFeatureTypeClient returns a client for the FeatureType from the given config.
func NewFeatureTypeClient(c config) *FeatureTypeClient {
	return &FeatureTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `featuretype.Hooks(f(g(h())))`.
func (c *FeatureTypeClient) Use(hooks ...Hook) {
	c.hooks.FeatureType = append(c.hooks.FeatureType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `featuretype.Intercept(f(g(h())))`.
func (c *FeatureTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeatureType = append(c.inters.FeatureType, interceptors...)
}

// Create returns a builder for creating a FeatureType entity.
func (c *FeatureTypeClient) Create() *FeatureTypeCreate {
	mutation := newFeatureTypeMutation(c.config, OpCreate)
	return &FeatureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeatureType entities.
func (c *FeatureTypeClient) CreateBulk(builders ...*FeatureTypeCreate) *FeatureTypeCreateBulk {
	return &FeatureTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureTypeClient) MapCreateBulk(slice any, setFunc func(*FeatureTypeCreate, int)) *FeatureTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureTypeCreateBulk{err: fmt.Errorf("calling to FeatureTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeatureType.
func (c *FeatureTypeClient) Update() *FeatureTypeUpdate {
	mutation := newFeatureTypeMutation(c.config, OpUpdate)
	return &FeatureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureTypeClient) UpdateOne(ft *FeatureType) *FeatureTypeUpdateOne {
	mutation := newFeatureTypeMutation(c.config, OpUpdateOne, withFeatureType(ft))
	return &FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureTypeClient) UpdateOneID(id int32) *FeatureTypeUpdateOne {
	mutation := newFeatureTypeMutation(c.config, OpUpdateOne, withFeatureTypeID(id))
	return &FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeatureType.
func (c *FeatureTypeClient) Delete() *FeatureTypeDelete {
	mutation := newFeatureTypeMutation(c.config, OpDelete)
	return &FeatureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureTypeClient) DeleteOne(ft *FeatureType) *FeatureTypeDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureTypeClient) DeleteOneID(id int32) *FeatureTypeDeleteOne {
	builder := c.Delete().Where(featuretype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureTypeDeleteOne{builder}
}

// Query returns a query builder for FeatureType.
func (c *FeatureTypeClient) Query() *FeatureTypeQuery {
	return &FeatureTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeatureType},
		inters: c.Interceptors(),
	}
}

// Get returns a FeatureType entity by its id.
func (c *FeatureTypeClient) Get(ctx context.Context, id int32) (*FeatureType, error) {
	return c.Query().Where(featuretype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureTypeClient) GetX(ctx context.Context, id int32) *FeatureType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a FeatureType.
func (c *FeatureTypeClient) QueryEarthquake(ft *FeatureType) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(featuretype.Table, featuretype.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, featuretype.EarthquakeTable, featuretype.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureTypeClient) Hooks() []Hook {
	return c.hooks.FeatureType
}

// Interceptors returns the client interceptors.
func (c *FeatureTypeClient) Interceptors() []Interceptor {
	return c.inters.FeatureType
}

func (c *FeatureTypeClient) mutate(ctx context.Context, m *FeatureTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeatureType mutation op: %q", m.Op())
	}
}

// FeltReportClient is a client for the FeltReport schema.
type FeltReportClient struct {
	config
}

// NewFeltReportClient returns a client for the FeltReport from the given config.
func NewFeltReportClient(c config) *FeltReportClient {
	return &FeltReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feltreport.Hooks(f(g(h())))`.
func (c *FeltReportClient) Use(hooks ...Hook) {
	c.hooks.FeltReport = append(c.hooks.FeltReport, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feltreport.Intercept(f(g(h())))`.
func (c *FeltReportClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeltReport = append(c.inters.FeltReport, interceptors...)
}

// Create returns a builder for creating a FeltReport entity.
func (c *FeltReportClient) Create() *FeltReportCreate {
	mutation := newFeltReportMutation(c.config, OpCreate)
	return &FeltReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeltReport entities.
func (c *FeltReportClient) CreateBulk(builders ...*FeltReportCreate) *FeltReportCreateBulk {
	return &FeltReportCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeltReportClient) MapCreateBulk(slice any, setFunc func(*FeltReportCreate, int)) *FeltReportCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeltReportCreateBulk{err: fmt.Errorf("calling to FeltReportClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeltReportCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeltReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeltReport.
func (c *FeltReportClient) Update() *FeltReportUpdate {
	mutation := newFeltReportMutation(c.config, OpUpdate)
	return &FeltReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeltReportClient) UpdateOne(fr *FeltReport) *FeltReportUpdateOne {
	mutation := newFeltReportMutation(c.config, OpUpdateOne, withFeltReport(fr))
	return &FeltReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeltReportClient) UpdateOneID(id int32) *FeltReportUpdateOne {
	mutation := newFeltReportMutation(c.config, OpUpdateOne, withFeltReportID(id))
	return &FeltReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeltReport.
func (c *FeltReportClient) Delete() *FeltReportDelete {
	mutation := newFeltReportMutation(c.config, OpDelete)
	return &FeltReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeltReportClient) DeleteOne(fr *FeltReport) *FeltReportDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeltReportClient) DeleteOneID(id int32) *FeltReportDeleteOne {
	builder := c.Delete().Where(feltreport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeltReportDeleteOne{builder}
}

// Query returns a query builder for FeltReport.
func (c *FeltReportClient) Query() *FeltReportQuery {
	return &FeltReportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeltReport},
		inters: c.Interceptors(),
	}
}

// Get returns a FeltReport entity by its id.
func (c *FeltReportClient) Get(ctx context.Context, id int32) (*FeltReport, error) {
	return c.Query().Where(feltreport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeltReportClient) GetX(ctx context.Context, id int32) *FeltReport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a FeltReport.
func (c *FeltReportClient) QueryEarthquake(fr *FeltReport) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feltreport.Table, feltreport.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feltreport.EarthquakeTable, feltreport.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeltReportClient) Hooks() []Hook {
	return c.hooks.FeltReport
}

// Interceptors returns the client interceptors.
func (c *FeltReportClient) Interceptors() []Interceptor {
	return c.inters.FeltReport
}

func (c *FeltReportClient) mutate(ctx context.Context, m *FeltReportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeltReportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeltReportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeltReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeltReportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeltReport mutation op: %q", m.Op())
	}
}

// GeometryClient is a client for the Geometry schema.
type GeometryClient struct {
	config
}

// NewGeometryClient returns a client for the Geometry from the given config.
func NewGeometryClient(c config) *GeometryClient {
	return &GeometryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `geometry.Hooks(f(g(h())))`.
func (c *GeometryClient) Use(hooks ...Hook) {
	c.hooks.Geometry = append(c.hooks.Geometry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `geometry.Intercept(f(g(h())))`.
func (c *GeometryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Geometry = append(c.inters.Geometry, interceptors...)
}

// Create returns a builder for creating a Geometry entity.
func (c *GeometryClient) Create() *GeometryCreate {
	mutation := newGeometryMutation(c.config, OpCreate)
	return &GeometryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Geometry entities.
func (c *GeometryClient) CreateBulk(builders ...*GeometryCreate) *GeometryCreateBulk {
	return &GeometryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GeometryClient) MapCreateBulk(slice any, setFunc func(*GeometryCreate, int)) *GeometryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GeometryCreateBulk{err: fmt.Errorf("calling to GeometryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GeometryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GeometryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Geometry.
func (c *GeometryClient) Update() *GeometryUpdate {
	mutation := newGeometryMutation(c.config, OpUpdate)
	return &GeometryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeometryClient) UpdateOne(ge *Geometry) *GeometryUpdateOne {
	mutation := newGeometryMutation(c.config, OpUpdateOne, withGeometry(ge))
	return &GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeometryClient) UpdateOneID(id int32) *GeometryUpdateOne {
	mutation := newGeometryMutation(c.config, OpUpdateOne, withGeometryID(id))
	return &GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Geometry.
func (c *GeometryClient) Delete() *GeometryDelete {
	mutation := newGeometryMutation(c.config, OpDelete)
	return &GeometryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeometryClient) DeleteOne(ge *Geometry) *GeometryDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeometryClient) DeleteOneID(id int32) *GeometryDeleteOne {
	builder := c.Delete().Where(geometry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeometryDeleteOne{builder}
}

// Query returns a query builder for Geometry.
func (c *GeometryClient) Query() *GeometryQuery {
	return &GeometryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGeometry},
		inters: c.Interceptors(),
	}
}

// Get returns a Geometry entity by its id.
func (c *GeometryClient) Get(ctx context.Context, id int32) (*Geometry, error) {
	return c.Query().Where(geometry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeometryClient) GetX(ctx context.Context, id int32) *Geometry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a Geometry.
func (c *GeometryClient) QueryEarthquake(ge *Geometry) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(geometry.Table, geometry.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, geometry.EarthquakeTable, geometry.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GeometryClient) Hooks() []Hook {
	return c.hooks.Geometry
}

// Interceptors returns the client interceptors.
func (c *GeometryClient) Interceptors() []Interceptor {
	return c.inters.Geometry
}

func (c *GeometryClient) mutate(ctx context.Context, m *GeometryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GeometryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GeometryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GeometryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GeometryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Geometry mutation op: %q", m.Op())
	}
}

// SchemaMigrationClient is a client for the SchemaMigration schema.
type SchemaMigrationClient struct {
	config
}

// NewSchemaMigrationClient returns a client for the SchemaMigration from the given config.
func NewSchemaMigrationClient(c config) *SchemaMigrationClient {
	return &SchemaMigrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemamigration.Hooks(f(g(h())))`.
func (c *SchemaMigrationClient) Use(hooks ...Hook) {
	c.hooks.SchemaMigration = append(c.hooks.SchemaMigration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schemamigration.Intercept(f(g(h())))`.
func (c *SchemaMigrationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SchemaMigration = append(c.inters.SchemaMigration, interceptors...)
}

// Create returns a builder for creating a SchemaMigration entity.
func (c *SchemaMigrationClient) Create() *SchemaMigrationCreate {
	mutation := newSchemaMigrationMutation(c.config, OpCreate)
	return &SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SchemaMigration entities.
func (c *SchemaMigrationClient) CreateBulk(builders ...*SchemaMigrationCreate) *SchemaMigrationCreateBulk {
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SchemaMigrationClient) MapCreateBulk(slice any, setFunc func(*SchemaMigrationCreate, int)) *SchemaMigrationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SchemaMigrationCreateBulk{err: fmt.Errorf("calling to SchemaMigrationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SchemaMigrationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SchemaMigration.
func (c *SchemaMigrationClient) Update() *SchemaMigrationUpdate {
	mutation := newSchemaMigrationMutation(c.config, OpUpdate)
	return &SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemaMigrationClient) UpdateOne(sm *SchemaMigration) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigration(sm))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemaMigrationClient) UpdateOneID(id int) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigrationID(id))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemaMigration.
func (c *SchemaMigrationClient) Delete() *SchemaMigrationDelete {
	mutation := newSchemaMigrationMutation(c.config, OpDelete)
	return &SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchemaMigrationClient) DeleteOne(sm *SchemaMigration) *SchemaMigrationDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchemaMigrationClient) DeleteOneID(id int) *SchemaMigrationDeleteOne {
	builder := c.Delete().Where(schemamigration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemaMigrationDeleteOne{builder}
}

// Query returns a query builder for SchemaMigration.
func (c *SchemaMigrationClient) Query() *SchemaMigrationQuery {
	return &SchemaMigrationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchemaMigration},
		inters: c.Interceptors(),
	}
}

// Get returns a SchemaMigration entity by its id.
func (c *SchemaMigrationClient) Get(ctx context.Context, id int) (*SchemaMigration, error) {
	return c.Query().Where(schemamigration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemaMigrationClient) GetX(ctx context.Context, id int) *SchemaMigration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SchemaMigrationClient) Hooks() []Hook {
	return c.hooks.SchemaMigration
}

// Interceptors returns the client interceptors.
func (c *SchemaMigrationClient) Interceptors() []Interceptor {
	return c.inters.SchemaMigration
}

func (c *SchemaMigrationClient) mutate(ctx context.Context, m *SchemaMigrationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SchemaMigration mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APIRequestLog, AssociatedEvent, Earthquake, Earthquake_db, EventType,
		FeatureType, FeltReport, Geometry, SchemaMigration []ent.Hook
	}
	inters struct {
		APIRequestLog, AssociatedEvent, Earthquake, Earthquake_db, EventType,
		FeatureType, FeltReport, Geometry, SchemaMigration []ent.Interceptor
	}
)
